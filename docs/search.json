[{"path":"https://jeroendmulder.github.io/powRICLPM/articles/extensions.html","id":"bounded-estimation-with-lavaan","dir":"Articles","previous_headings":"","what":"Bounded estimation with lavaan","title":"Extensions","text":"prevent non-convergence small sample sizes (say, less 100), bounds can imposed parameter space estimation model using bounds = TRUE (De Jonckere & Rosseel, 2022). can aid optimization algorithm find unique solutions prevents searching completely wrong direction one, multiple parameters. Sensible lower bounds involve (residual) variances latent variables (e.g., random intercept variances), negative variances theoretically possible. Upper bound variances determined based observed variances variable. context RI-CLPM, factor loadings (usually) fixed, hence parameters estimated. lagged effects theoretically infinite, hence sensible bounds can place à priori parameters.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/extensions.html","id":"constraints-over-time","dir":"Articles","previous_headings":"","what":"Constraints over time","title":"Extensions","text":"powRICLPM() offers users option impose various constraints time estimation model constraints argument. statistical advantages constraints time reduce model complexity, thereby potentially reducing convergence issues increasing power. Moreover, researchers interested called ‘stationarity’ constraints theoretical reasons. disadvantage constraints assume certain parameters time-invariant. might assumption researchers willing make, especially developmental contexts expect lagged effects might change time (e.g., variable wA gets important driving wB one gets older). Therefore, default constraints = \"none\", implying lagged effects, within-components (residual) variances covariances freely estimated time. Constraint options include: constraints = \"lagged\": Autoregressive cross-lagged effects constrained equal time. constraints = \"residuals: Within-unit residual variances covariance (wave 2 onward) constrained equal time. constraints = \"within\": lagged effects residual variances covariances constrained equal time. constraints = \"stationary\": Constraints imposed variances within-components first wave, residual variances wave 2 , variances within-components 1. implies variances first wave fixed 1, residual variances function lagged effects, correlation within-components wave. constraints deduced supplementary materials Mulder Hamaker (2021, see FAQ “can constrain standardized parameters invariant time?”). constraints = \"\": Constraints imposed measurement error variances across time (separately variable). constraint possible estimate_ME = TRUE.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/extensions.html","id":"measurement-error","dir":"Articles","previous_headings":"","what":"Measurement error","title":"Extensions","text":"generally advisable include measurement error analyzing psychological data, RI-CLPM include . Adding measurement error model result bivariate stable trait autoregressive trait state (STARTS) model Kenny Zautra (2001), requires least 4 waves data identified. Users can add measurement error variances estimation model specifying estimate_ME = TRUE. Measurement error can added simulated data using reliability argument. Note, however, STARTS model shown prone empirical -identification, often requiring upwards 8 waves data sample sizes larger 500.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/FAQ.html","id":"extensions","dir":"Articles","previous_headings":"","what":"Extensions","title":"FAQ","text":"RI-CLPM multiple indicators Unfortunately, powRICLPM package functionality (yet) include multiple indicator extensions RI-CLPM. However, one can use Mplus’s Monte Carlo functionalities specify multiple indicator RI-CLPMs (MI-RICLPM) simulate power. Furthermore, general comments made effect including multiple indicators power. example, Oertzen, Hertzog, Lindenberger, Ghisletta (2010) claim separation measurement error true score variance increases power, principle generalizes structural equation models, regardless regression model linking latent variables. implies MI-RICLPM’s power basic RI-CLPM. verify , small simulation study performed using Mplus (model syntax simulations can found GitHub). 10,000 datasets generated MI-RICLPM latent factor per occasion three indicators. factors contain trait-like part captured higher-order random intercepts, state-like part used capture dynamics time (see bottom panel Figure 3 Mulder Hamaker, 2021). factor loadings linking indicators latent factor set 1, measurement error variances set 0.5, cross-lagged effects fixed 0.2. population parameter values kept illustrative example Mulder (review), implying proportion measurement error observed variables \\(20\\%\\). simulated data sets analyzed using MI-RICLPM generated data (separates measurement error variance), basic RI-CLPM (assuming measurement error, using first indicator). Results show power detect non-zero lagged effects indeed larger MI-RICLPM (ranging 0.89 0.93 standardized cross-lagged effects 0.2, 0.927 0.939 standardized autoregressive effects 0.3) basic RI-CLPM (ranging 0.70 0.74 standardized cross-lagged effects 0.2, 0.807 0.827 standardized autoregressive effects 0.3). , inclusion multiple indicators complicates RI-CLPM power analysis, can generally stated separation measurement error true score variance extension multiple indicators beneficial power detect lagged effects. measurements, especially social behavioral sciences prone include measurement error, extension may well-worth considering power point--view. multiple indicator RI-CLPM multiple group RI-CLPM based fitting multiple group version RI-CLPM without constraints across groups (e.g., constraint equal lagged effects), comparing model fit determine whether imposed constraints tenable. Power thus refers probability rejecting bad-fitting model due untenable across-group constraints context, rather rejecting null-hypothesis specific parameter. effect size refers much worse constrained model fits data compared general model (less, across-group constraints). Analytic solutions, like likelihood ratio test Satorra Saris (1985) power analyses based RMSEA MacCallum, Browne, Sugawara (1996), efficient use types power analyses computationally intensive Monte Carlo simulation studies. See, example, SSpower() function R-package semTools multiple group SEM power analysis Jak, Jorgensen, Verdam, Oort, Elffers (2020), Jorgensen, Pornprasertmanit, Schoeman, Rosseel (2021).","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/mplus.html","id":"steps-1-and-2-experimental-conditions-and-population-parameter-values","dir":"Articles","previous_headings":"","what":"Steps 1 and 2: Experimental conditions and population parameter values","title":"Using Mplus","text":"example, investigate power detect small standardized cross-lagged effect \\(0.2\\) sample sizes 100 1000 (incremental steps 50) RI-CLPM 3, 4 5 repeated measures. total, results \\(19 \\times 3 = 57\\) experimental conditions. Moreover, following example Get started Vignette, population parameter values :","code":"Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = T)  # The .2 refers to our standardized cross-lagged effect of interest ICC <- 0.5 RI_cor <- 0.3"},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/mplus.html","id":"steps-3-5-perform-the-power-analysis","dir":"Articles","previous_headings":"","what":"Steps 3-5: Perform the power analysis","title":"Using Mplus","text":"create Mplus model syntax, use powRICLPM_Mplus() function. must provide: range sample sizes simulate power using search_lower, search_upper, search_step arguments, number repeated measures using time_points argument, population values Phi, wSigma, ICC, RI_cor, number MCMC replications want perform per condition reps argument, seed control starting point random number generator, save_path, denoting directory save Mplus input file . example, specify: Optionally, can specify constraints argument extend basic power analysis setup. option described Vignette Extensions. powRICLPM_Mplus() creates Mplus input file (multiple files multiple experimental conditions specified) writes specified directory. file contains Mplus model syntax needed run power analysis RI-CLPM Mplus. information Monte Carlo simulations Mplus can found http://statmodel.com/download/usersguide/Chapter12.pdf.","code":"powRICLPM_Mplus(search_lower = 100,                 search_upper = 1000,                 search_step = 50,                 time_points = c(3, 4, 5),                 ICC = 0.5,                 RI_cor = 0.3,                 Phi = Phi,                 within_cor = 0.3,                 reps = 10000,                 seed = 123456,                 save_path = \"./saved\")"},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/mplus.html","id":"step-6-summarize-results","dir":"Articles","previous_headings":"","what":"Step 6: Summarize results","title":"Using Mplus","text":"get output, run Mplus model syntax file Mplus. time, output file created summarizing results Mplus power analysis. good source interpreting output context MONTECARLO study Muthén Muthén (2002).","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/Mulder2022.html","id":"preliminary-analysis","dir":"Articles","previous_headings":"","what":"Preliminary analysis","title":"Online supplementary materials - R code Mulder (2022)","text":"First, Monte Carlo power analysis performed 171 experimental conditions using limited number replications (reps = 100). preliminary results serve basis selecting experimental conditions show promising results (.e., meet desired power- accuracy levels). conditions validated using large number replications (reps = 2000) next step. R-code preliminary analysis can found :","code":"# Matrix of standardized lagged effects Phi <- matrix(c(0.20, 0.10, 0.15, 0.30), byrow = FALSE, ncol = 2) # powRICLPM automatically computes Psi based on Phi and within_cor  # Setup parallel processing to speed up computations plan(multisession, workers = 6)  # Perform preliminary power analysis (with progress bar) with_progress({   out_preliminary <- powRICLPM(     target_power = 0.8,     search_lower = 200,     search_upper = 2000,     search_step = 100,     time_points = c(3, 4, 5),     ICC = c(0.3, 0.5, 0.7),     RI_cor = 0.35,     Phi = Phi,     within_cor = 0.26,     reps = 100,     seed = 123456   ) })  # Tabular summary of results summary(out_preliminary) summary(out_preliminary, sample_size = 200, time_points = 3, ICC = 0.3) res_wB2wA1 <- give(out_preliminary, what = \"results\", parameter = \"wB2~wA1\")  # Visualize power p <- plot(x = out_preliminary, parameter = \"wB2~wA1\")  # Tailor visualization for Mulder (under review) p <- p +   labs(color = \"Number of time points\") +   scale_x_continuous(     name = \"Sample size\",     breaks = seq(200, 2000, 200),     guide = guide_axis(n.dodge = 2)   ) +   theme(legend.position = \"bottom\", text = element_text(size = 8)) p ggsave(\"Mulder2022_preliminary_power.png\", height = 5, width = 7)"},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/Mulder2022.html","id":"validation","dir":"Articles","previous_headings":"","what":"Validation","title":"Online supplementary materials - R code Mulder (2022)","text":"preliminary results suggest least 4 time-points sample size upwards 1000 required condition advantageous proportion -unit variance (proportion -unit variance 0.3). conditions 0.7 proportion -unit variance, sample sizes approximately 1500 needed 5 repeated measures, whereas sample sizes upwards 1700 needed 4 repeated measures. Based results, following experimental conditions validation selected: range sample sizes reduced 900 1800, experimental conditions 3 repeated measures omitted. results total 10 sample sizes \\(\\times\\) 2 numbers repeated measures \\(\\times\\) 3 proportions -unit variance, totaling 60 experimental conditions validation.","code":"# Setup parallel processing to speed up computations plan(multisession, workers = 6)  # Perform preliminary power analysis (with progress bar) with_progress({   out_validation <- powRICLPM(     target_power = 0.8,     search_lower = 900,     search_upper = 1800,     search_step = 100,     time_points = c(4, 5),     ICC = c(0.3, 0.5, 0.7),     RI_cor = 0.35,      Phi = Phi,     within_cor = 0.26,     reps = 2000,      seed = 123456   ) })  # Tabular summary of results summary(out_validation, parameter = \"wB2~wA1\") res_wB2wA1 <- give(out_validation, what = \"results\", parameter = \"wB2~wA1\")  # Visualize power p2 <- plot(out_validation, parameter = \"wB2~wA1\")  # Tailor visualization of power for Mulder (2022) p2 <- p2 +    labs(color = \"Number of time points\") +   scale_x_continuous(     name = \"Sample size\",     breaks = seq(900, 1800, 100),     guide = guide_axis(n.dodge = 2)) +   scale_color_manual(values = c(\"#00BA38\", \"#619CFF\")) +   theme(legend.position = \"bottom\", text = element_text(size = 8)) p2 ggsave(\"Mulder2022_validation_power.png\", height = 5, width = 7)"},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/powRICLPM.html","id":"step-1-determine-experimental-conditions","dir":"Articles","previous_headings":"","what":"Step 1: Determine experimental conditions","title":"Get started","text":"performing power analysis, must first determine experimental conditions interest. Experimental conditions (: simulation conditions) defined characteristics study design can impact statistical power. includes, among others, characteristics like sample size number repeated measures. Decide number repeated measures used simulations, well range sample sizes want simulate power. example, take sample size range 100 1000 first, increasing steps 100. Let numbers repeated measures range 3 5. experimental conditions lead desired amount power detecting small cross-lagged effect, ranges can extended later.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/powRICLPM.html","id":"step-2-choose-population-parameter-values","dir":"Articles","previous_headings":"","what":"Step 2: Choose population parameter values","title":"Get started","text":"Next, determine population parameter values generating data RI-CLPM. requires specification : Phi: Standardized autoregressive cross-lagged effects within-unit components model. values collected matrix, columns representing predictors rows representing outcomes. within_cor: correlation within-unit components. ICC: proportion variance -unit level (relative total variance). RI_cor: correlation random intercepts. example, parameter values set : unsure specified Phi matrix intended, can use check_Phi() function give summary effects Phi interpreted.","code":"Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = T) # The .2 refers to our standardized cross-lagged effect of interest within_cor <- 0.3 ICC <- 0.5 RI_cor <- 0.3"},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/powRICLPM.html","id":"steps-3-5-perform-the-power-analysis","dir":"Articles","previous_headings":"","what":"Steps 3-5: Perform the power analysis","title":"Get started","text":"Steps 3 5 automated powRICLPM() function. input, must provide: desired power level using target_power argument, range sample sizes simulate power using search_lower, search_upper, search_step arguments (alternatively, can specify directly providing vector sample sizes sample_size argument), number time points simulated data using time_points argument, population values Phi, within_cor, ICC, RI_cor, number Monte Carlo replications want perform per experimental condition reps argument. Optionally, can specify: skewness kurtosis: integer (vector) determines skewness kurtosis simulated observed variables, respectively. Suppose reason believe \\(\\) \\(B\\) variables positively skewed, heavy tails (.e., higher kurtosis) can include arguments skewness = 1 kurtosis = 0.5 (default: 0). alpha: numeric value denoting significance criterion (default: 0.05). seed: integer control starting point random number generator. important use want replicate results. reliability: numeric value representing reliability indicators (.e., proportion true score variance) (default: 1). bootstrap_reps: numeric value, denoting number bootstrap replications used simulate uncertainty around power analysis results (default: 1000). estimator: character string, denoting estimator used estimating models (default: “ML”; skewness /kurtosis values set nonzero values, defaults “MLR”). constraints, bounds, estimate_ME arguments can set well extend basic power analysis setup. options described Vignette Extensions. example, can perform power analysis running:","code":"output <- powRICLPM(   target_power = 0.8,   search_lower = 100,   search_upper = 1000,   search_step = 50,   time_points = c(3, 4, 5),   ICC = ICC,   RI_cor = RI_cor,    Phi = Phi,   within_cor = 0.3,   reps = 1000 )"},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/powRICLPM.html","id":"parallel-processing-using-furrr","dir":"Articles","previous_headings":"Steps 3-5: Perform the power analysis","what":"Parallel processing using furrr","title":"Get started","text":"Performing Monte Carlo power analysis large number replications, across multiple simulation conditions can time-consuming. speed process, recommended perform power analysis across simulation conditions parallel (.e., multiple cores). powRICLPM() function implemented future’s parallel processing capabilities using furrr package. Load furrr package, use plan() function change power analysis execution sequential (.e., single-core, default), multisession (.e., multicore). Use workers argument specify many cores want use. Next, run powRICLPM analysis, power analysis run specified number cores. can result significant reduction computing time. information parallel execution strategies, see ?furrr::plan().","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/powRICLPM.html","id":"progress-bar-using-progressr","dir":"Articles","previous_headings":"Steps 3-5: Perform the power analysis","what":"Progress bar using progressr","title":"Get started","text":"can useful get approximation progress powRICLPM analysis running code, especially running analysis parallel. powRICLPM() implemented progress notifications using progressr package. Simply put, two options can get progress notifications: can subscribe progress updates specific expression wrapping expression with_progress({...}). can subscribe progress updates everywhere running handlers(global = T). second option fully developed yet furrr package, instead focus first. Implementing with_progress({...}) option, well parallel execution powRICLPM analysis, results code example: information progress notification options using progressr end-users, including auditory email updates, see https://progressr.futureverse.org.","code":"# Load the furrr and progressr packages library(furrr) library(progressr)  # Check how many cores are available future::availableCores()  # Plan powRICLPM analysis to run on 1 core less than number of available cores plan(multisession, workers = 7) # For the case of 8 available cores  # Run the powRICLPM analysis  with_progress({ # Subscribe to progress updates   output <- powRICLPM(     target_power = 0.8,     search_lower = 100,     search_upper = 1000,     search_step = 50,     time_points = c(3, 4, 5),     ICC = ICC,     RI_cor = RI_cor,      Phi = Phi,     within_cor = 0.3,     reps = 1000   ) })  # Revert back to sequential execution of code  plan(sequential)"},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/powRICLPM.html","id":"step-6-summarize-results","dir":"Articles","previous_headings":"","what":"Step 6: Summarize results","title":"Get started","text":"powRICLPM() function creates powRICLPM object: list results, upon can call print(), summary(), give(), plot() functions print, summarize, extract results, visualize results, respectively. print() outputs textual summary power analysis design contained within object called upon. output performance metrics computed power analysis. summary() can used one four ways. First, summary can used simply like print() get information design power analysis (different experimental conditions), well number problems occurred per condition (e.g., non-convergence, fatal estimation errors, inadmissible results). Second, specifying parameter = \"...\" argument summary(), function print results specifically parameter across experimental conditions. Third, specify specific experimental condition using summary()’s sample_size, time_points, ICC arguments, performance measures outputted parameters experimental condition. give() extracts various bits information powRICLPM object. exact information extracted given = \"...\" argument: = \"conditions\" gives different experimental conditions per row, condition defined unique combination sample size, number time points ICC. = \"estimation_problems\" gives proportion fatal errors, inadmissible values, non-converged estimations (columns) per experimental conditions (row). = \"results\" gives average estimate average, minimum estimate minimum, standard deviation parameter estimates SD, average standard error SEavg, mean square error MSE, average width confidence interval accuracy, coverage rate coverage, proportion times p-value lower significance criterion power. requires setting parameter = \"...\" argument. = \"names\" gives parameter names contained within powRICLPM object. Finally, plot() creates ggplot2-plot specific parameter (specified using parameter = \"...\" argument) sample size x-axis, simulated power y-axis, lines grouped number time-points, plots wrapped proportion -unit variance. plot() returns ggplot2 object can fully customized using ggplot2 functionality. example, can change scales, add titles, change geoms, etc. information options ggplot2 framework can found https://ggplot2-book.org/index.html. example, add title change labels x-axis:","code":"# Summary of study design summary(output)  # Summary of results for a specific parameter, across simulation conditions summary(output, parameter = \"wB2~wA1\")  # Summary of all parameter for a specific simulation condition summary(output, sample_size = 400, time_points = 4, ICC = 0.5) # Extract experimental conditions give(output, what = \"conditions\")  # Extract estimation problems give(output, what = \"estimation_problems\")  # Extract results for cross-lagged effect \"wB2~wA1\"  give(output, what = \"results\", parameter = \"wB2~wA1\")  # Extract parameter names give(output, what = \"names\") # Create basic plot of powRICLPM object p <- plot(output, parameter = \"wB2~wA1\") p  # Adjust plot aesthetics p2 <- p +    ggplot2::labs(     title = \"Power analysis for RI-CLPM\",     caption = \"Based on 1000 replications.\"   ) +   ggplot2::scale_x_continuous(     name = \"Sample size\",     breaks = seq(100, 1000, 100),     guide = ggplot2::guide_axis(n.dodge = 2)   ) p2"},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/start.html","id":"step-1-determine-experimental-conditions","dir":"Articles","previous_headings":"","what":"Step 1: Determine experimental conditions","title":"Get started","text":"performing power analysis, must first determine experimental conditions interest. Experimental conditions (: simulation conditions) defined characteristics study design can impact statistical power. includes, among others, characteristics like sample size number repeated measures. Decide number repeated measures used simulations, well range sample sizes want simulate power. example, take sample size range 100 1000 first, increasing steps 100. Let numbers repeated measures range 3 5. experimental conditions lead desired amount power detecting small cross-lagged effect, ranges can extended.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/start.html","id":"step-2-choose-population-parameter-values","dir":"Articles","previous_headings":"","what":"Step 2: Choose population parameter values","title":"Get started","text":"Next, determine population parameter values generating data RI-CLPM. requires specification : Phi: Standardized autoregressive cross-lagged effects within-unit components model. values collected matrix columns representing predictors rows representing outcomes. within_cor: correlation within-unit components. ICC: proportion variance -unit level (relative total variance). RI_cor: correlation random intercepts. example, parameter values set :","code":"Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = T) # The .2 refers to our standardized cross-lagged effect of interest within_cor <- 0.3 ICC <- 0.5 RI_cor <- 0.3"},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/start.html","id":"steps-3-5-perform-the-power-analysis","dir":"Articles","previous_headings":"","what":"Steps 3-5: Perform the power analysis","title":"Get started","text":"Steps 3 5 automated powRICLPM() function. input, must provide: desired power level using target_power argument, range sample sizes simulate power using search_lower, search_upper, search_step arguments (alternatively, can specify directly providing vector sample sizes sample_size argument), number time points simulated data using time_points argument, population values Phi, within_cor, ICC, RI_cor, number Monte Carlo replications want perform per experimental condition reps argument. Optionally, can specify: skewness kurtosis: integer (vector) determines skewness kurtosis simulated observed variables, respectively. Suppose reason believe \\(\\) \\(B\\) variables positively skewed, heavy tails (.e., higher kurtosis) can include arguments skewness = 1 kurtosis = 0.5 (default: 0). alpha: numeric value denoting significance criterion (default: 0.05). seed: integer control starting point random number generator. important use want replicate results. reliability: numeric value representing reliability indicators (.e., proportion true score variance) (default: 1). bootstrap_reps: numeric value, denoting number bootstrap replications used simulate uncertainty around power analysis results (default: 1000). estimator: character string, denoting estimator used estimating models (default: “ML”; skewness /kurtosis values set nonzero values, defaults “MLR”). constraints, bounds, estimate_ME arguments can set well extend basic power analysis setup. options described Vignette Extensions. example, can perform power analysis running:","code":"output <- powRICLPM(   target_power = 0.8,   search_lower = 100,   search_upper = 1000,   search_step = 50,   time_points = c(3, 4, 5),   ICC = ICC,   RI_cor = RI_cor,    Phi = Phi,   within_cor = 0.3,   reps = 1000 )"},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/start.html","id":"parallel-processing-using-furrr","dir":"Articles","previous_headings":"Steps 3-5: Perform the power analysis","what":"Parallel processing using furrr","title":"Get started","text":"Performing Monte Carlo power analysis large number replications, across multiple simulation conditions can time-consuming. speed process, recommended perform power analysis across simulation conditions parallel (.e., multiple cores). powRICLPM() function implemented future’s parallel processing capabilities using furrr package. Load furrr package, use plan() function change power analysis execution sequential (.e., single-core, default), multisession (.e., multicore). Use workers argument specify many cores want use. Next, run powRICLPM analysis, power analysis run specified number cores. can result significant reduction computing time. information parallel execution strategies, see ?furrr::plan().","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/start.html","id":"progress-bar-using-progressr","dir":"Articles","previous_headings":"Steps 3-5: Perform the power analysis","what":"Progress bar using progressr","title":"Get started","text":"can useful get approximation progress powRICLPM analysis running code, especially running analysis parallel. powRICLPM() implemented progress notifications using progressr package. Simply put, two options can get progress notifications: can subscribe progress updates specific expression wrapping expression with_progress({...}). can subscribe progress updates everywhere running handlers(global = T). second option fully developed yet furrr package, instead focus first. Implementing with_progress({...}) option, well parallel execution powRICLPM analysis, results code example: information progress notification options using progressr end-users, including auditory email updates, see https://progressr.futureverse.org.","code":"# Load the furrr and progressr packages library(furrr) library(progressr)  # Check how many cores are available future::availableCores()  # Plan powRICLPM analysis to run on 1 core less than number of available cores plan(multisession, workers = 7) # For the case of 8 available cores  # Run the powRICLPM analysis  with_progress({ # Subscribe to progress updates   output <- powRICLPM(     target_power = 0.8,     search_lower = 100,     search_upper = 1000,     search_step = 50,     time_points = c(3, 4, 5),     ICC = ICC,     RI_cor = RI_cor,      Phi = Phi,     within_cor = 0.3,     reps = 1000   ) })  # Revert back to sequential execution of code  plan(sequential)"},{"path":"https://jeroendmulder.github.io/powRICLPM/articles/start.html","id":"step-6-summarize-results","dir":"Articles","previous_headings":"","what":"Step 6: Summarize results","title":"Get started","text":"powRICLPM() function creates powRICLPM object: list results, upon can call print(), summary(), give(), plot() functions print, summarize, extract results, visualize results, respectively. print() outputs textual summary power analysis design contained within object called upon. output performance metrics computed power analysis. summary() can used one four ways. First, summary can used simply like print() get information design power analysis (different experimental conditions), well number problems occurred per condition (e.g., non-convergence, fatal estimation errors, inadmissible results). Second, specifying parameter = \"...\" argument summary(), function print results specifically parameter across experimental conditions. Third, specify specific experimental condition using summary()’s sample_size, time_points, ICC arguments, performance measures outputted parameters experimental condition. give() extracts various bits information powRICLPM object. exact information extracted given = \"...\" argument: = \"conditions\" gives different experimental conditions per row, condition defined unique combination sample size, number time points ICC. = \"estimation_problems\" gives proportion fatal errors, inadmissible values, non-converged estimations (columns) per experimental conditions (row). = \"results\" gives average estimate average, minimum estimate minimum, standard deviation parameter estimates SD, average standard error SEavg, mean square error MSE, average width confidence interval accuracy, coverage rate coverage, proportion times p-value lower significance criterion power. requires setting parameter = \"...\" argument. = \"names\" gives parameter names contained within powRICLPM object. Finally, plot() creates ggplot2-plot specific parameter (specified using parameter = \"...\" argument) sample size x-axis, simulated power y-axis, lines grouped number time-points, plots wrapped proportion -unit variance. plot() returns ggplot2 object can fully customized using ggplot2 functionality. example, can change scales, add titles, change geoms, etc. information options ggplot2 framework can found https://ggplot2-book.org/index.html. example, add title change labels x-axis:","code":"# Summary of study design summary(output)  # Summary of results for a specific parameter, across simulation conditions summary(output, parameter = \"wB2~wA1\")  # Summary of all parameter for a specific simulation condition summary(output, sample_size = 400, time_points = 4, ICC = 0.5) # Extract experimental conditions give(output, what = \"conditions\")  # Extract estimation problems give(output, what = \"estimation_problems\")  # Extract results for cross-lagged effect \"wB2~wA1\"  give(output, what = \"results\", parameter = \"wB2~wA1\")  # Extract parameter names give(output, what = \"names\") # Create basic plot of powRICLPM object p <- plot(output, parameter = \"wB2~wA1\") p  # Adjust plot aesthetics p2 <- p +    ggplot2::labs(     title = \"Power analysis for RI-CLPM\",     caption = \"Based on 1000 replications.\"   ) +   ggplot2::scale_x_continuous(     name = \"Sample size\",     breaks = seq(100, 1000, 100),     guide = ggplot2::guide_axis(n.dodge = 2)   ) p2"},{"path":"https://jeroendmulder.github.io/powRICLPM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeroen Mulder. Author, maintainer. Netherlands Organization Scientific Research. Funder.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mulder, J.D. (2022). Power analysis random intercept cross-lagged panel model using powRICLPM R-package. Structural Equation Modeling: Multidisciplinary Journal. https://doi.org/10.1080/10705511.2022.2122467","code":"@Article{,   title = {Power analysis for the random intercept cross-lagged panel model using the powRICLPM R-package},   author = {Jeroen D. Mulder},   journal = {Structural Equation Modeling: A Multidisciplinary Journal},   year = {2022},   url = {https://doi.org/10.1080/10705511.2022.2122467}, }"},{"path":"https://jeroendmulder.github.io/powRICLPM/index.html","id":"powriclpm","dir":"","previous_headings":"","what":"Power analysis for the RI-CLPM","title":"Power analysis for the RI-CLPM","text":"powRICLPM R package performs power analysis random intercept cross-lagged panel model (RI-CLPM) simple user-friendly way. implements strategy proposed Mulder (2022). main functionalities include: Setting performing basic power analysis: Obtain power reject null-hypothesis effect (well performance measures, bias, mean square error, etc.) parameters RI-CLPM given specific sample size, number repeated measures, proportion -unit variance (among things). power analysis can performed across multiple experimental conditions simultaneously (.e., varying numbers repeated measures, proportions -unit variance, etc.). Extending basic power analysis setup: Extend basic power analysis include use bounded estimation, various (stationarity) constraints time parameters estimation model, /estimation measurement error. Create Mplus model syntax: Create syntax performing RI-CLPM power analyses using Mplus.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Power analysis for the RI-CLPM","text":"four sources documentation powRICLPM: rationale power analysis strategy implemented can found Mulder (2022). Every user-facing function package documented, documentation can accessed running ?function_name R console (e.g., ?powRICLPM). , can find explanations use functions, well technical details. four main vignettes accessible via ‘Vignettes’ tab, describing functionalities analysis options package generally. ‘Example’ vignette serves online supplementary material Mulder (2022), contains R code illustrative example using powRICLPM package. FAQ contains answers frequently asked question reach via email.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Power analysis for the RI-CLPM","text":"install development version powRICLPM, including latest bug fixes new features, run: install latest release powRICLPM CRAN, run:","code":"install.packages(\"devtools\") devtools::install_github(\"jeroendmulder/powRICLPM\") install.packages(\"powRICLPM\")"},{"path":"https://jeroendmulder.github.io/powRICLPM/index.html","id":"citing-powriclpm","dir":"","previous_headings":"","what":"Citing powRICLPM","title":"Power analysis for the RI-CLPM","text":"can cite R-package following citation: Mulder, J.D., (2022). Power analysis random intercept cross-lagged panel model using powRICLPM R-package. Structural Equation Modeling: Multidisciplinary Journal. https://doi.org/10.1080/10705511.2022.2122467","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Power analysis for the RI-CLPM","text":"ideas, comments, issues like raise, please get touch. Issues ideas can raised GitHub via https://github.com/jeroendmulder/powRICLPM Pull request can created GitHub via https://github.com/jeroendmulder/powRICLPM/pulls","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Jeroen D. Mulder Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/check_Phi.html","id":null,"dir":"Reference","previous_headings":"","what":"Check interpretation `Phi` argument — check_Phi","title":"Check interpretation `Phi` argument — check_Phi","text":"Write textual interpretation values `Phi`. can used check `Phi` correctly specified.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/check_Phi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check interpretation `Phi` argument — check_Phi","text":"","code":"check_Phi(Phi)"},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/check_Phi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check interpretation `Phi` argument — check_Phi","text":"Phi matrix, standardized autoregressive effects (diagonal) cross-lagged effects (-diagonal) population. Columns represent predictors rows represent outcomes.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/check_Phi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check interpretation `Phi` argument — check_Phi","text":"return value, called side effects.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/check_Phi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check interpretation `Phi` argument — check_Phi","text":"","code":"# Correctly specified `Phi` Phi1 <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = TRUE) check_Phi(Phi1) #> Error in check_Phi(Phi1): could not find function \"check_Phi\"  # `Phi` with too large standardized effects Phi2 <- matrix(c(.6, .5, .4, .7), ncol = 2, byrow = TRUE) Phi2 <- check_Phi(Phi2) #> Error in check_Phi(Phi2): could not find function \"check_Phi\""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/give.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract information from powRICLPM object — give","title":"Extract information from powRICLPM object — give","text":"Extract information stored within powRICLPM object (internally used print.powRICLPM summary.powRICLPM). See \"Details\" pieces information can extracted. information presented condition (.e., sample size, number time points, ICC).","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/give.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract information from powRICLPM object — give","text":"","code":"give(from, what, parameter = NULL)"},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/give.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract information from powRICLPM object — give","text":"powRICLPM object character string, denoting information extract, either \"conditions\", \"estimation_problems\", \"results\", \"names\". parameter (optional) = \"results\", character string denoting parameter extract results .","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/give.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract information from powRICLPM object — give","text":"data.frame.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/give.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract information from powRICLPM object — give","text":"following information can extracted powRICLPM object: conditions: data.frame different experimental conditions per row, condition defined unique combination sample size, number time points ICC. estimation_problems: proportion fatal errors, inadmissible values, non-converged estimations (columns) per experimental conditions (row). results: average estimate (average), minimum estimate (minimum), standard deviation parameter estimates (SD), average standard error (SEavg), mean square error (MSE), average width confidence interval (accuracy), coverage rate (coverage), proportion times p-value lower significance criterion (power). requires setting parameter = \"...\" argument. names: parameter names condition least parameters (.e., parameter names apply experimental condition).","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/give.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract information from powRICLPM object — give","text":"","code":"# \\dontshow{ load(system.file(\"extdata\", \"out_preliminary.Rds\", package = \"powRICLPM\")) # } # Return data frame with number of estimation problems per experimental condition give(out_preliminary, \"estimation_problems\") #>    sample_size time_points ICC errors not_converged inadmissible #> 1          500           3 0.4      0             0            1 #> 2          600           3 0.4      0             0            0 #> 3          700           3 0.4      0             0            0 #> 4          800           3 0.4      0             0            1 #> 5          900           3 0.4      0             0            0 #> 6         1000           3 0.4      0             0            0 #> 7          500           4 0.4      0             0            0 #> 8          600           4 0.4      0             0            0 #> 9          700           4 0.4      0             0            0 #> 10         800           4 0.4      0             0            0 #> 11         900           4 0.4      0             0            0 #> 12        1000           4 0.4      0             0            0 #> 13         500           3 0.5      0             0            0 #> 14         600           3 0.5      0             0            0 #> 15         700           3 0.5      0             0            0 #> 16         800           3 0.5      0             0            0 #> 17         900           3 0.5      0             0            0 #> 18        1000           3 0.5      0             0            0 #> 19         500           4 0.5      0             0            0 #> 20         600           4 0.5      0             0            0 #> 21         700           4 0.5      0             0            0 #> 22         800           4 0.5      0             0            0 #> 23         900           4 0.5      0             0            0 #> 24        1000           4 0.5      0             0            0 #> 25         500           3 0.6      0             0            0 #> 26         600           3 0.6      0             0            0 #> 27         700           3 0.6      0             0            0 #> 28         800           3 0.6      0             0            0 #> 29         900           3 0.6      0             0            0 #> 30        1000           3 0.6      0             0            0 #> 31         500           4 0.6      0             0            0 #> 32         600           4 0.6      0             0            0 #> 33         700           4 0.6      0             0            0 #> 34         800           4 0.6      0             0            0 #> 35         900           4 0.6      0             0            0 #> 36        1000           4 0.6      0             0            0  # Return data frame with performance measures for \"wB2~wA1\" per experimental condition give(out_preliminary, \"results\", parameter = \"wB2~wA1\") #>    sample_size time_points ICC population_value average minimum    SD SEAvg #> 1          500           3 0.4              0.2   0.208   0.026 0.076 0.079 #> 2          600           3 0.4              0.2   0.205   0.004 0.071 0.073 #> 3          700           3 0.4              0.2   0.193  -0.005 0.063 0.069 #> 4          800           3 0.4              0.2   0.201   0.060 0.063 0.063 #> 5          900           3 0.4              0.2   0.194   0.036 0.062 0.060 #> 6         1000           3 0.4              0.2   0.200   0.042 0.059 0.056 #> 7          500           4 0.4              0.2   0.200   0.063 0.059 0.063 #> 8          600           4 0.4              0.2   0.203   0.067 0.057 0.057 #> 9          700           4 0.4              0.2   0.201   0.099 0.049 0.053 #> 10         800           4 0.4              0.2   0.204   0.097 0.045 0.049 #> 11         900           4 0.4              0.2   0.200   0.101 0.044 0.046 #> 12        1000           4 0.4              0.2   0.201   0.079 0.048 0.044 #> 13         500           3 0.5              0.2   0.207   0.040 0.085 0.088 #> 14         600           3 0.5              0.2   0.195  -0.030 0.078 0.080 #> 15         700           3 0.5              0.2   0.205  -0.030 0.078 0.073 #> 16         800           3 0.5              0.2   0.207  -0.012 0.071 0.069 #> 17         900           3 0.5              0.2   0.194  -0.034 0.074 0.066 #> 18        1000           3 0.5              0.2   0.200   0.007 0.063 0.062 #> 19         500           4 0.5              0.2   0.203   0.024 0.071 0.065 #> 20         600           4 0.5              0.2   0.191   0.043 0.059 0.060 #> 21         700           4 0.5              0.2   0.203   0.053 0.057 0.056 #> 22         800           4 0.5              0.2   0.202   0.115 0.045 0.053 #> 23         900           4 0.5              0.2   0.194   0.096 0.047 0.049 #> 24        1000           4 0.5              0.2   0.200   0.120 0.042 0.047 #> 25         500           3 0.6              0.2   0.189  -0.061 0.094 0.098 #> 26         600           3 0.6              0.2   0.189  -0.024 0.088 0.087 #> 27         700           3 0.6              0.2   0.194   0.010 0.080 0.083 #> 28         800           3 0.6              0.2   0.200   0.060 0.071 0.077 #> 29         900           3 0.6              0.2   0.193  -0.004 0.073 0.072 #> 30        1000           3 0.6              0.2   0.197  -0.060 0.075 0.069 #> 31         500           4 0.6              0.2   0.198   0.030 0.067 0.071 #> 32         600           4 0.6              0.2   0.197   0.014 0.067 0.066 #> 33         700           4 0.6              0.2   0.194   0.070 0.058 0.060 #> 34         800           4 0.6              0.2   0.203   0.054 0.057 0.057 #> 35         900           4 0.6              0.2   0.200   0.075 0.051 0.053 #> 36        1000           4 0.6              0.2   0.195   0.079 0.051 0.050 #>      MSE accuracy coverage power #> 1  0.006    0.307     0.96  0.74 #> 2  0.005    0.286     0.96  0.82 #> 3  0.004    0.271     0.96  0.85 #> 4  0.004    0.246     0.94  0.82 #> 5  0.004    0.235     0.94  0.86 #> 6  0.003    0.220     0.94  0.92 #> 7  0.003    0.245     0.96  0.90 #> 8  0.003    0.225     0.94  0.94 #> 9  0.002    0.206     0.97  1.00 #> 10 0.002    0.192     0.97  0.99 #> 11 0.002    0.180     0.95  0.99 #> 12 0.002    0.171     0.90  0.98 #> 13 0.007    0.343     0.96  0.61 #> 14 0.006    0.314     0.95  0.72 #> 15 0.006    0.286     0.94  0.78 #> 16 0.005    0.270     0.94  0.86 #> 17 0.005    0.257     0.92  0.85 #> 18 0.004    0.244     0.95  0.89 #> 19 0.005    0.256     0.90  0.88 #> 20 0.004    0.236     0.93  0.94 #> 21 0.003    0.219     0.94  0.97 #> 22 0.002    0.207     0.97  1.00 #> 23 0.002    0.192     0.96  0.99 #> 24 0.002    0.183     0.98  1.00 #> 25 0.009    0.386     0.95  0.48 #> 26 0.008    0.343     0.94  0.62 #> 27 0.006    0.325     0.96  0.70 #> 28 0.005    0.301     0.98  0.74 #> 29 0.005    0.280     0.96  0.77 #> 30 0.006    0.270     0.94  0.80 #> 31 0.004    0.277     0.96  0.82 #> 32 0.004    0.258     0.95  0.88 #> 33 0.003    0.236     0.95  0.91 #> 34 0.003    0.223     0.94  0.94 #> 35 0.003    0.207     0.97  0.97 #> 36 0.003    0.196     0.94  0.96  # Return character vector with parameter names give(out_preliminary, \"names\") #>  [1] \"RI_A~~RI_A\" \"RI_B~~RI_B\" \"RI_A~~RI_B\" \"wA2~wA1\"    \"wA2~wB1\"    #>  [6] \"wB2~wA1\"    \"wB2~wB1\"    \"wA3~wA2\"    \"wA3~wB2\"    \"wB3~wA2\"    #> [11] \"wB3~wB2\"    \"wA1~~wA1\"   \"wB1~~wB1\"   \"wA1~~wB1\"   \"wA2~~wA2\"   #> [16] \"wA3~~wA3\"   \"wB2~~wB2\"   \"wB3~~wB3\"   \"wA2~~wB2\"   \"wA3~~wB3\""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/plot.powRICLPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot results from powRICLPM object — plot.powRICLPM","title":"Plot results from powRICLPM object — plot.powRICLPM","text":"Visualizes (using ggplot2) results powRICLPM analysis, specific parameter, across experimental conditions. default, sample size plotted x-axis, power y-axis, results grouped number time points wrapped proportion -unit variance. Optionally, y argument can used change variable y-axis outcomes powRICLPM analysis.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/plot.powRICLPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot results from powRICLPM object — plot.powRICLPM","text":"","code":"# S3 method for powRICLPM plot(x, y = \"power\", ..., parameter = NULL)"},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/plot.powRICLPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot results from powRICLPM object — plot.powRICLPM","text":"x powRICLPM object. y (optional) character string, specifying outcome plotted y-axis (see \"Details\"). ... (use) parameter Character string length denoting parameter visualize results .","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/plot.powRICLPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot results from powRICLPM object — plot.powRICLPM","text":"ggplot2 object.","code":""},{"path":[]},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/plot.powRICLPM.html","id":"y-axis-options","dir":"Reference","previous_headings":"","what":"y-axis options","title":"Plot results from powRICLPM object — plot.powRICLPM","text":"following outcomes can plotted y-axis: average: average estimate. MSE: mean square error. coverage: coverage rate accuracy: average width confidence interval. SD: Standard deviation parameter estimates. SEAvg: Average standard error. bias: absolute difference average estimate population value.","code":""},{"path":[]},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/plot.powRICLPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot results from powRICLPM object — plot.powRICLPM","text":"","code":"# \\dontshow{ load(system.file(\"extdata\", \"out_preliminary.Rds\", package = \"powRICLPM\")) # } # Visualize power for \"wB2~wA1\" across simulation conditions plot(out_preliminary, parameter = \"wB2~wA1\")   # Visualize bias for \"wB2~wA1\" across simulation conditions plot(out_preliminary, y = \"bias\", parameter = \"wB2~wA1\")   # Visualize coverage rate for \"wB2~wA1\" across simulation conditions plot(out_preliminary, y = \"coverage\", parameter = \"wB2~wA1\")   # Visualize MSE for autoregressive effect across simulation conditions plot(out_preliminary, y = \"MSE\", parameter = \"wA2~wA1\")   # Error: No parameter specified try(plot(out_preliminary)) #> Error in check_parameter_given(parameter) : No `parameter` was specified: #> ℹ `plot()` needs to know which specific parameter to create a plot for."},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Power analysis for the RI-CLPM (and STARTS model) — powRICLPM","title":"Power analysis for the RI-CLPM (and STARTS model) — powRICLPM","text":"Perform Monte Carlo power analysis random intercept cross-lagged panel model (RI-CLPM). function computes performance metrics (e.g., bias, mean square error, coverage, power, etc) RI-CLPM parameters, can perform power analyses across multiple experimental conditions simultaneously. Conditions defined terms sample size, number time points, proportion -unit variance (ICC). See \"Details\" information ) data simulation, b) model estimation, c) internal naming conventions parameters, d) option include measurement errors (.e., estimating Stable Trait Autoregressive Trait State model), e) imposing various constraints time, f) parallel execution capabilities speeding analysis.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power analysis for the RI-CLPM (and STARTS model) — powRICLPM","text":"","code":"powRICLPM(   target_power,   search_lower = NULL,   search_upper = NULL,   search_step = 20,   sample_size = NULL,   time_points,   ICC,   RI_cor,   Phi,   within_cor,   reliability = 1,   skewness = 0,   kurtosis = 0,   estimate_ME = FALSE,   alpha = 0.05,   reps = 20,   bootstrap_reps = 1000,   seed = NA,   constraints = \"none\",   bounds = FALSE,   estimator = NA,   save_path = NULL )"},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power analysis for the RI-CLPM (and STARTS model) — powRICLPM","text":"target_power numeric value 0 1, denoting targeted power level. search_lower positive integer, denoting lower bound range sample sizes. search_upper positive integer, denoting upper bound range sample sizes. search_step positive integer, denoting increment sample size. sample_size (optional) integer (vector), indicating specific sample sizes evaluate power, rather specifying range using search_* arguments. time_points integer (vector) elements least larger 3, indicating number time points. ICC double (vector) elements 0 1, denoting proportion (true score) variance -unit level. measurement error included data generating model, ICC computed variance random intercept factor divided true score variance (.e., controlled measurement error). RI_cor double 0 1, denoting correlation random intercepts. Phi matrix, standardized autoregressive effects (diagonal) cross-lagged effects (-diagonal) population. Columns represent predictors rows represent outcomes. within_cor double 0 1, denoting correlation within-unit components. reliability (optional) numeric value 0 1, denoting reliability variables. skewness (optional) numeric value, denoting skewness values observed variables (see simulateData). kurtosis (optional) numeric value, denoting excess kurtosis values (.e., compared kurtosis normal distribution) observed variables (see simulateData). estimate_ME (optional) logical, denoting measurement error variance estimated RI-CLPM (see \"Details\"). alpha (optional) double, denoting significance criterion. reps positive integer, denoting number Monte Carlo replications used simulations. bootstrap_reps (optional) positive integer, denoting number bootstrap samples use quantifying uncertainty (.e., 95% bootstrap confidence interval) around power analysis results. seed integer length 1. multiple cores used, seed length 1 used generate full L'Ecuyer-CMRG seed cores (see furrr_options). constraints (optional) character string, specifying type constraints imposed estimation model (see \"Details\"). bounds (optional) logical, denoting bounded estimation used latent variable variances model (see \"Details\"). estimator (options) character, denoting estimator used (default: ML, see \"Details\"). save_path character string naming directory save (data) files (used validation purposes package). Variables saved alphabetical numerical order.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power analysis for the RI-CLPM (and STARTS model) — powRICLPM","text":"list containing conditions session element. condition list experimental conditions, element list containing input output power analysis particular experimental condition. session list containing information common experimental conditions.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Power analysis for the RI-CLPM (and STARTS model) — powRICLPM","text":"rationale power analysis strategy implemented package can found Mulder (2022).","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM.html","id":"data-generation","dir":"Reference","previous_headings":"","what":"Data generation","title":"Power analysis for the RI-CLPM (and STARTS model) — powRICLPM","text":"Data generated using simulateData lavaan package. Based Phi within_cor, residual variances covariances within-components wave 2 later computed, within-components variance 1. implies lagged effects Phi can interpreted standardized effects.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM.html","id":"model-estimation","dir":"Reference","previous_headings":"","what":"Model estimation","title":"Power analysis for the RI-CLPM (and STARTS model) — powRICLPM","text":"Data analyzed using lavaan lavaan package. default estimator maximum likelihood (ML). maximum likelihood based estimators implemented lavaan can specified well. skewed kurtosed data generated (using skewness kurtosis arguments), estimator defaults robust maximum likelihood MLR. population parameter values used starting values. Parameter estimates non-converged model solutions discarded results. bounds = FALSE, inadmissible parameter estimates converged solutions (e.g., negative random intercept variance) discarded. bounds = TRUE, inadmissible parameter estimates retained following advice De Jonckere Rosseel (2022). results include minimum estimates parameters across replications diagnose parameter(s) () cause inadmissible solution.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM.html","id":"naming-conventions-for-observed-and-latent-variables","dir":"Reference","previous_headings":"","what":"Naming conventions for observed and latent variables","title":"Power analysis for the RI-CLPM (and STARTS model) — powRICLPM","text":"observed variables RI-CLPM given default names, namely capital letters alphabetical order, numbers denoting measurement occasion. example, bivariate RICLPM 3 time points, observe A1, A2, A3, B1, B2, B3. within-components denoted wA1, wA2, ..., wB3, respectively. -components RI_ prepended variable name, resulting RI_A RI_B. Parameters denoted using lavaan model syntax (see lavaan website). example, random intercept variances denoted RI_A~~RI_A RI_B~~RI_B, cross-lagged effects first wave wB2~wA1 wA2~wB1, autoregressive effects wA2~wA1 wB2~wB1. Use give(object, \"names\") extract parameter names powRICLPM object.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM.html","id":"measurement-errors-starts-model-","dir":"Reference","previous_headings":"","what":"Measurement errors (STARTS model)","title":"Power analysis for the RI-CLPM (and STARTS model) — powRICLPM","text":"Including measurement error RI-CLPM makes model equivalent Stable Trait Autoregressive Trait State (STARTS) model Kenny Zautra (2001) without constraints time. Measurement error can added generated data reliability argument. Setting reliability = 0.8 implies 80% true score variance 20% measurement error variance; ICC denotes proportion true score variance captured random intercept factors. Estimating measurement errors (.e., STARTS model) done setting est_ME = TRUE.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM.html","id":"imposing-constraints","dir":"Reference","previous_headings":"","what":"Imposing constraints","title":"Power analysis for the RI-CLPM (and STARTS model) — powRICLPM","text":"following constraints can imposed estimation model using constraints = \"...\" argument: lagged: Time-invariant autoregressive cross-lagged effects. residuals: Time-invariant residual variances. within: Time-invariant lagged effects residual variances. stationarity: Constraints within-unit level stationary process estimated. included time-invariant lagged effects, constraints residual variances. : Time-invariant measurement error variances. possible estimate_ME = TRUE.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM.html","id":"bounded-estimation","dir":"Reference","previous_headings":"","what":"Bounded estimation","title":"Power analysis for the RI-CLPM (and STARTS model) — powRICLPM","text":"Bounded estimation useful avoid nonconvergence small samples (< 100). , automatic wide bounds used advised De Jonckere Rosseel (2022), see optim.bounds lavOptions. option can used constraints imposed estimation model.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM.html","id":"parallel-processing-using-furrr","dir":"Reference","previous_headings":"","what":"Parallel processing using furrr","title":"Power analysis for the RI-CLPM (and STARTS model) — powRICLPM","text":"speed analysis, power analysis multiple experimental conditions can executed parallel. implemented using furrr. default analysis executed sequentially (.e., single-core). Parallel execution (.e., multicore) can setup using plan, example plan(multisession, workers = 4). information options, see https://furrr.futureverse.org. progress bar displaying status power analysis implemented using progressr. default, simple progress bar shown. information control progress bar several notification options (e.g., auditory notifications), see https://progressr.futureverse.org.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Power analysis for the RI-CLPM (and STARTS model) — powRICLPM","text":"De Jonckere, J., & Rosseel, Y. (2022). Using bounded estimation avoid nonconvergence small sample structural equation modeling. Structural Equation Modeling, 29(3), 412-427. doi:10.1080/10705511.2021.1982716 Kenny, D. ., & Zautra, . (2001). Trait–state models longitudinal data. New methods analysis change (pp. 243–263). American Psychological Association. doi:10.1037/10409-008 Mulder, J. D. (2022). Power analysis random intercept cross-lagged panel model using powRICLPM R-package. Structural Equation Modeling. doi:10.1080/10705511.2022.2122467","code":""},{"path":[]},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Power analysis for the RI-CLPM (and STARTS model) — powRICLPM","text":"Jeroen D. Mulder j.d.mulder@uu.nl","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power analysis for the RI-CLPM (and STARTS model) — powRICLPM","text":"","code":"# Define population parameters for lagged effects Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = TRUE)  # (optional) Set up parallel computing (i.e., multicore, speeding up the analysis) library(furrr) #> Loading required package: future #> Warning: package 'future' was built under R version 4.2.2 library(progressr) #> Warning: package 'progressr' was built under R version 4.2.2 future::plan(multisession)  # \\donttest{ # Run analysis (\"reps\" is small, because this is an example) with_progress({   out_preliminary <- powRICLPM(     target_power = 0.8,     search_lower = 500,     search_upper = 1000,     search_step = 100,     time_points = c(3, 4),     ICC = c(0.4, 0.5, 0.6),     RI_cor = 0.3,     Phi = Phi,     within_cor = 0.3,     reps = 100,     seed = 1234   ) }) #> ℹ Checking arguments... #> ℹ Creating lavaan syntax... #> ℹ Starting Monte Carlo replications... # }  # \\dontshow{ ## Shut down parallel workers (done for sake of example, normally not needed) future::plan(\"sequential\") # }"},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM_Mplus.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Mplus syntax for RI-CLPM power analysis — powRICLPM_Mplus","title":"Create Mplus syntax for RI-CLPM power analysis — powRICLPM_Mplus","text":"powRICLPM_Mplus() creates saves () syntax file(s) performing Monte Carlo power analysis random intercept cross-lagged panel model (RI-CLPM) Mplus. Mplus model syntax can created across multiple experimental conditions simultaneously. Conditions defined terms sample size, number time points, proportion -unit variance (ICC). See \"Details\" information ) naming conventions parameters, b) various constraints can imposed model.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM_Mplus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Mplus syntax for RI-CLPM power analysis — powRICLPM_Mplus","text":"","code":"powRICLPM_Mplus(   search_lower = NULL,   search_upper = NULL,   search_step = 20,   sample_size = NULL,   time_points,   ICC,   RI_cor,   Phi,   within_cor,   reps = 1000,   seed = NA,   save_path = getwd(),   constraints = \"none\" )"},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM_Mplus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Mplus syntax for RI-CLPM power analysis — powRICLPM_Mplus","text":"search_lower positive integer, denoting lower bound range sample sizes. search_upper positive integer, denoting upper bound range sample sizes. search_step positive integer, denoting increment sample size. sample_size (optional) integer (vector), indicating specific sample sizes evaluate power, rather specifying range using search_* arguments. time_points integer (vector) elements least larger 3, indicating number time points. ICC double (vector) elements 0 1, denoting proportion (true score) variance -unit level. measurement error included data generating model, ICC computed variance random intercept factor divided true score variance (.e., controlled measurement error). RI_cor double 0 1, denoting correlation random intercepts. Phi matrix, standardized autoregressive effects (diagonal) cross-lagged effects (-diagonal) population. Columns represent predictors rows represent outcomes. within_cor double 0 1, denoting correlation within-unit components. reps positive integer, denoting number Monte Carlo replications used simulations. seed integer length 1. multiple cores used, seed length 1 used generate full L'Ecuyer-CMRG seed cores (see furrr_options). save_path character string, denoting path folder save Mplus syntax files (default: current working directory). constraints (optional) character string, specifying type constraints imposed estimation model (see \"Details\").","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM_Mplus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Mplus syntax for RI-CLPM power analysis — powRICLPM_Mplus","text":"return value, called side effects.","code":""},{"path":[]},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM_Mplus.html","id":"syntax-generation","dir":"Reference","previous_headings":"","what":"Syntax generation","title":"Create Mplus syntax for RI-CLPM power analysis — powRICLPM_Mplus","text":"Mplus model syntax created multiple steps: First, MODEL POPULATION command syntax created parameters constrained population values. Second, MODEL command syntax created model estimation. Optionally, syntax constraints estimation model, MODEL CONSTRAINTS command, created next. Ultimately, parameter tables combined form character vectors containing Mplus syntax exported (see \"Details\" powRICLPM information constraints options).","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM_Mplus.html","id":"naming-conventions","dir":"Reference","previous_headings":"","what":"Naming conventions","title":"Create Mplus syntax for RI-CLPM power analysis — powRICLPM_Mplus","text":"Details naming conventions can found \"Details\" section powRICLPM.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/powRICLPM_Mplus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Mplus syntax for RI-CLPM power analysis — powRICLPM_Mplus","text":"","code":"# Define population parameters for lagged effects Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = TRUE)  # Create and save Mplus model syntax powRICLPM_Mplus(   sample_size = c(400, 500),   time_points = 3,   ICC = 0.5,   RI_cor = 0.3,   Phi = Phi,   within_cor = 0.3,   reps = 10000,   seed = 1234,   save_path = tempdir() ) #> ℹ Mplus model syntax created: #>  #>   Directory: C:\\Users\\5879167\\AppData\\Local\\Temp\\RtmpU15DGM #>   Sample size(s): 400 500 #>   Number of time points: 3 #>   Proportion(s) random intercept variance: 0.5  # \\dontshow{ unlink(file.path(tempdir(), c(\"Mplus_N400_T3_ICC0.5.txt\", \"Mplus_N500_T3_ICC0.5.txt\"))) # }"},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/print.powRICLPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Print powRICLPM object — print.powRICLPM","title":"Print powRICLPM object — print.powRICLPM","text":"print.powRICLPM prints table listing experimental conditions contained powRICLPM object, well frequency estimation problems occurred .","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/print.powRICLPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print powRICLPM object — print.powRICLPM","text":"","code":"# S3 method for powRICLPM print(x, ...)"},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/print.powRICLPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print powRICLPM object — print.powRICLPM","text":"x powRICLPM object. ... Argument use.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/print.powRICLPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print powRICLPM object — print.powRICLPM","text":"return value, called side effects.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/summary.powRICLPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize setup and results from powRICLPM object — summary.powRICLPM","title":"Summarize setup and results from powRICLPM object — summary.powRICLPM","text":"S3 method class powRICLPM. summary.powRICLPM summarizes outputs setup results powRICLPM analysis. Depending arguments set, summary.powRICLPM provides different summary (see \"Details\").","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/summary.powRICLPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize setup and results from powRICLPM object — summary.powRICLPM","text":"","code":"# S3 method for powRICLPM summary(   object,   ...,   parameter = NULL,   sample_size = NULL,   time_points = NULL,   ICC = NULL )"},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/summary.powRICLPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize setup and results from powRICLPM object — summary.powRICLPM","text":"object powRICLPM object. ... (use) Additional arguments affecting summary produced. parameter Character string length denoting parameter visualize results . sample_size (optional) integer, denoting sample size experimental condition interest. time_points (optional) integer, denoting number time points experimental condition interest. ICC (optional) double, denoting proportion variance -unit level experimental condition interest.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/summary.powRICLPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize setup and results from powRICLPM object — summary.powRICLPM","text":"return value, called side effects.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/summary.powRICLPM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize setup and results from powRICLPM object — summary.powRICLPM","text":"summary.powRICLPM provides different summary powRICLPM object, depending additional arguments set: sample_size = ..., time_points = ..., ICC = ... set: Estimation information results parameters experimental condition denoted sample_size, time_points, ICC. parameter = \"...\" set: Estimation information results specific parameter across experimental conditions. additional arguments: Characteristics different experimental conditions summarized, well session info (information applies conditions, number replications, etc.).","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/reference/summary.powRICLPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize setup and results from powRICLPM object — summary.powRICLPM","text":"","code":"# \\dontshow{ load(system.file(\"extdata\", \"out_preliminary.Rds\", package = \"powRICLPM\")) # }  # Get setup of powRICLPM analysis and convergence issues summary(out_preliminary) #> powRICLPM (0.1.0.9000) simulated power for 36 experimental conditions: #>  #>  Sample size    Time points   ICC   Errors   Non-convergence    Inadmissible results #> -------------  ------------  ----  -------  -----------------  --------------------- #>      500                  3   0.4        0          0                              1 #>      600                  3   0.4        0          0                              0 #>      700                  3   0.4        0          0                              0 #>      800                  3   0.4        0          0                              1 #>      900                  3   0.4        0          0                              0 #>     1000                  3   0.4        0          0                              0 #>      500                  4   0.4        0          0                              0 #>      600                  4   0.4        0          0                              0 #>      700                  4   0.4        0          0                              0 #>      800                  4   0.4        0          0                              0 #>      900                  4   0.4        0          0                              0 #>     1000                  4   0.4        0          0                              0 #>      500                  3   0.5        0          0                              0 #>      600                  3   0.5        0          0                              0 #>      700                  3   0.5        0          0                              0 #>      800                  3   0.5        0          0                              0 #>      900                  3   0.5        0          0                              0 #>     1000                  3   0.5        0          0                              0 #>      500                  4   0.5        0          0                              0 #>      600                  4   0.5        0          0                              0 #>      700                  4   0.5        0          0                              0 #>      800                  4   0.5        0          0                              0 #>      900                  4   0.5        0          0                              0 #>     1000                  4   0.5        0          0                              0 #>      500                  3   0.6        0          0                              0 #>      600                  3   0.6        0          0                              0 #>      700                  3   0.6        0          0                              0 #>      800                  3   0.6        0          0                              0 #>      900                  3   0.6        0          0                              0 #>     1000                  3   0.6        0          0                              0 #>      500                  4   0.6        0          0                              0 #>      600                  4   0.6        0          0                              0 #>      700                  4   0.6        0          0                              0 #>      800                  4   0.6        0          0                              0 #>      900                  4   0.6        0          0                              0 #>     1000                  4   0.6        0          0                              0  # Performance measures for \"wB2~wA1\" parameter across experimental conditions summary(out_preliminary, parameter = \"wB2~wA1\") #> Results for wB2~wA1 across conditions: #>  #>     N    T   ICC   Err   NC   IR    PV     Avg      Min      SD   SE Avg     MSE   Accuracy   Coverage   Power #> -----  ---  ----  ----  ---  ---  ----  ------  -------  ------  -------  ------  ---------  ---------  ------ #>   500    3   0.4     0    0    1   0.2   0.208    0.026   0.076    0.079   0.006      0.307       0.96    0.74 #>   600    3   0.4     0    0    0   0.2   0.205    0.004   0.071    0.073   0.005      0.286       0.96    0.82 #>   700    3   0.4     0    0    0   0.2   0.193   -0.005   0.063    0.069   0.004      0.271       0.96    0.85 #>   800    3   0.4     0    0    1   0.2   0.201    0.060   0.063    0.063   0.004      0.246       0.94    0.82 #>   900    3   0.4     0    0    0   0.2   0.194    0.036   0.062    0.060   0.004      0.235       0.94    0.86 #>  1000    3   0.4     0    0    0   0.2   0.200    0.042   0.059    0.056   0.003      0.220       0.94    0.92 #>   500    4   0.4     0    0    0   0.2   0.200    0.063   0.059    0.063   0.003      0.245       0.96    0.90 #>   600    4   0.4     0    0    0   0.2   0.203    0.067   0.057    0.057   0.003      0.225       0.94    0.94 #>   700    4   0.4     0    0    0   0.2   0.201    0.099   0.049    0.053   0.002      0.206       0.97    1.00 #>   800    4   0.4     0    0    0   0.2   0.204    0.097   0.045    0.049   0.002      0.192       0.97    0.99 #>   900    4   0.4     0    0    0   0.2   0.200    0.101   0.044    0.046   0.002      0.180       0.95    0.99 #>  1000    4   0.4     0    0    0   0.2   0.201    0.079   0.048    0.044   0.002      0.171       0.90    0.98 #>   500    3   0.5     0    0    0   0.2   0.207    0.040   0.085    0.088   0.007      0.343       0.96    0.61 #>   600    3   0.5     0    0    0   0.2   0.195   -0.030   0.078    0.080   0.006      0.314       0.95    0.72 #>   700    3   0.5     0    0    0   0.2   0.205   -0.030   0.078    0.073   0.006      0.286       0.94    0.78 #>   800    3   0.5     0    0    0   0.2   0.207   -0.012   0.071    0.069   0.005      0.270       0.94    0.86 #>   900    3   0.5     0    0    0   0.2   0.194   -0.034   0.074    0.066   0.005      0.257       0.92    0.85 #>  1000    3   0.5     0    0    0   0.2   0.200    0.007   0.063    0.062   0.004      0.244       0.95    0.89 #>   500    4   0.5     0    0    0   0.2   0.203    0.024   0.071    0.065   0.005      0.256       0.90    0.88 #>   600    4   0.5     0    0    0   0.2   0.191    0.043   0.059    0.060   0.004      0.236       0.93    0.94 #>   700    4   0.5     0    0    0   0.2   0.203    0.053   0.057    0.056   0.003      0.219       0.94    0.97 #>   800    4   0.5     0    0    0   0.2   0.202    0.115   0.045    0.053   0.002      0.207       0.97    1.00 #>   900    4   0.5     0    0    0   0.2   0.194    0.096   0.047    0.049   0.002      0.192       0.96    0.99 #>  1000    4   0.5     0    0    0   0.2   0.200    0.120   0.042    0.047   0.002      0.183       0.98    1.00 #>   500    3   0.6     0    0    0   0.2   0.189   -0.061   0.094    0.098   0.009      0.386       0.95    0.48 #>   600    3   0.6     0    0    0   0.2   0.189   -0.024   0.088    0.087   0.008      0.343       0.94    0.62 #>   700    3   0.6     0    0    0   0.2   0.194    0.010   0.080    0.083   0.006      0.325       0.96    0.70 #>   800    3   0.6     0    0    0   0.2   0.200    0.060   0.071    0.077   0.005      0.301       0.98    0.74 #>   900    3   0.6     0    0    0   0.2   0.193   -0.004   0.073    0.072   0.005      0.280       0.96    0.77 #>  1000    3   0.6     0    0    0   0.2   0.197   -0.060   0.075    0.069   0.006      0.270       0.94    0.80 #>   500    4   0.6     0    0    0   0.2   0.198    0.030   0.067    0.071   0.004      0.277       0.96    0.82 #>   600    4   0.6     0    0    0   0.2   0.197    0.014   0.067    0.066   0.004      0.258       0.95    0.88 #>   700    4   0.6     0    0    0   0.2   0.194    0.070   0.058    0.060   0.003      0.236       0.95    0.91 #>   800    4   0.6     0    0    0   0.2   0.203    0.054   0.057    0.057   0.003      0.223       0.94    0.94 #>   900    4   0.6     0    0    0   0.2   0.200    0.075   0.051    0.053   0.003      0.207       0.97    0.97 #>  1000    4   0.6     0    0    0   0.2   0.195    0.079   0.051    0.050   0.003      0.196       0.94    0.96  # Performance measures for all parameters, for specific experimental condition summary(out_preliminary, sample_size = 600, time_points = 4, ICC = .5) #>  #> Results: #>  #> Parameter     Population value     Avg      Min      SD   SE Avg     MSE   Accuracy   Coverage  Power  #> -----------  -----------------  ------  -------  ------  -------  ------  ---------  ---------  ------ #> RI_A~~RI_A               1.000   0.984    0.767   0.100    0.107   0.010      0.418       0.97  1.00   #> RI_B~~RI_B               1.000   1.002    0.804   0.090    0.099   0.008      0.390       0.99  1.00   #> RI_A~~RI_B               0.300   0.302    0.154   0.071    0.080   0.005      0.312       0.99  0.99   #> wA2~wA1                  0.400   0.398    0.262   0.065    0.065   0.004      0.256       0.97  1.00   #> wA2~wB1                  0.100   0.103   -0.026   0.062    0.059   0.004      0.232       0.94  0.39   #> wB2~wA1                  0.200   0.191    0.043   0.059    0.060   0.004      0.236       0.93  0.94   #> wB2~wB1                  0.300   0.299    0.122   0.065    0.066   0.004      0.257       0.94  0.99   #> wA3~wA2                  0.400   0.393    0.209   0.069    0.066   0.005      0.260       0.95  1.00   #> wA3~wB2                  0.100   0.102   -0.109   0.063    0.059   0.004      0.231       0.96  0.45   #> wB3~wA2                  0.200   0.193    0.068   0.057    0.062   0.003      0.244       0.97  0.89   #> wB3~wB2                  0.300   0.294    0.101   0.061    0.066   0.004      0.260       0.97  0.98   #> wA4~wA3                  0.400   0.393    0.263   0.055    0.060   0.003      0.237       0.99  1.00   #> wA4~wB3                  0.100   0.094   -0.069   0.057    0.055   0.003      0.216       0.97  0.46   #> wB4~wA3                  0.200   0.200    0.016   0.063    0.059   0.004      0.229       0.94  0.92   #> wB4~wB3                  0.300   0.300    0.147   0.052    0.060   0.003      0.236       0.96  0.99   #> wA1~~wA1                 1.000   1.012    0.784   0.097    0.102   0.010      0.401       0.95  1.00   #> wB1~~wB1                 1.000   0.986    0.729   0.102    0.095   0.010      0.373       0.92  1.00   #> wA1~~wB1                 0.300   0.307    0.117   0.071    0.076   0.005      0.297       0.95  0.99   #> wA2~~wA2                 0.806   0.801    0.650   0.069    0.064   0.005      0.252       0.93  1.00   #> wA3~~wA3                 0.806   0.793    0.622   0.073    0.062   0.005      0.244       0.89  1.00   #> wA4~~wA4                 0.806   0.800    0.664   0.049    0.058   0.002      0.227       0.97  1.00   #> wB2~~wB2                 0.834   0.826    0.675   0.068    0.068   0.005      0.267       0.94  1.00   #> wB3~~wB3                 0.834   0.833    0.633   0.069    0.067   0.005      0.263       0.95  1.00   #> wB4~~wB4                 0.834   0.831    0.696   0.061    0.061   0.004      0.240       0.97  1.00   #> wA2~~wB2                 0.148   0.150    0.037   0.050    0.047   0.002      0.185       0.95  0.85   #> wA3~~wB3                 0.148   0.140    0.040   0.047    0.046   0.002      0.181       0.95  0.89   #> wA4~~wB4                 0.148   0.147    0.046   0.040    0.043   0.002      0.167       0.98  0.97   #>  #> Estimation problems: #>  #> ----------------------  --- #> Errors:                   0 #> Nonconvergence:           0 #> Inadmissible results:     0 #> ----------------------  --- #>  #> Condition info: #>  #> ------------------------  ------ #> Skewness:                      0 #> Kurtosis:                      0 #> Constraints:                none #> Bounds:                    FALSE #> Estimate ME:               FALSE #> Significance criterion:     0.05 #> ------------------------  ------"},{"path":[]},{"path":"https://jeroendmulder.github.io/powRICLPM/news/index.html","id":"minor-improvements-development-version","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"powRICLPM (development version)","text":"Now includes check_Phi() function, users can use check specified Phi matrix lagged-effects intended. plot() now allows performance measures, bias, MSE, coverage, plotted y argument.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/news/index.html","id":"bug-fixes-development-version","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"powRICLPM (development version)","text":"Mistakes model syntax estimation model imposing stationarity constraints (using constraints = \"stationarity\") now corrected.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/news/index.html","id":"powriclpm-010","dir":"Changelog","previous_headings":"","what":"powRICLPM 0.1.0","title":"powRICLPM 0.1.0","text":"CRAN release: 2022-10-07","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"powRICLPM 0.1.0","text":"powRICLPM can now save generated data sets specifying path save_dat argument","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/news/index.html","id":"minor-improvements-and-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"powRICLPM 0.1.0","text":"est_ME argument powRICLPM renamed estimate_ME. Internal model fitting using lavaan now skips certain checks speed process. wSigma argument powRICLPM replaced within_cor argument. Now, double denoting correlation within-components needs specified rather correlation matrix. default, powRICLPM now discards results Monte Carlo replications inadmissible parameter results, unless bounded estimation used (bounds = TRUE).","code":""},{"path":[]},{"path":"https://jeroendmulder.github.io/powRICLPM/news/index.html","id":"new-features-0-0-0-9004","dir":"Changelog","previous_headings":"","what":"New features","title":"powRICLPM 0.0.0.9004","text":"powRICLPM() can now set reliability observed variables generated data reliability argument (.e., include measurement error). powRICLPM() can estimate measurement errors setting est_ME = TRUE. powRICLPM() quantifies uncertainty around simulated power non-parametric bootstrapping. powRICLPM() now allows various estimators implemented lavaan. give(= ..., = \"...\") implemented extract various bits information powRICLPM object.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/news/index.html","id":"minor-improvements-and-fixes-0-0-0-9004","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"powRICLPM 0.0.0.9004","text":"check_N() now takes imposed constraints account create informative error messages (@dbaranger, #1). summary.powRICLPM() now tabulates output.","code":""},{"path":"https://jeroendmulder.github.io/powRICLPM/news/index.html","id":"powriclpm-0009003","dir":"Changelog","previous_headings":"","what":"powRICLPM 0.0.0.9003","title":"powRICLPM 0.0.0.9003","text":"Original GitHub release Beta-version powRICLPM May 17th, 2022.","code":""}]
