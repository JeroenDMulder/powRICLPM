[{"path":"/articles/extensions.html","id":"bounded-estimation-with-lavaan","dir":"Articles","previous_headings":"","what":"Bounded estimation with lavaan","title":"Extensions","text":"prevent non-convergence small sample sizes (say, less 100), bounds can imposed parameter space estimation model using bounds = TRUE (De Jonckere & Rosseel, 2022). can aid optimization algorithm find unique solutions prevents searching completely wrong direction one, multiple parameters. Sensible lower bounds involve (residual) variances latent variables (e.g., random intercept variances), negative variances theoretically possible. Upper bound variances determined based observed variances variable. context RI-CLPM, factor loadings (usually) fixed, hence parameters estimated. lagged effects theoretically infinite, hence sensible bounds can place à priori parameters.","code":""},{"path":"/articles/extensions.html","id":"constraints-over-time","dir":"Articles","previous_headings":"","what":"Constraints over time","title":"Extensions","text":"powRICLPM offers users option impose various constraints time estimation model constraints argument. statistical advantages constraints time reduce model complexity, thereby potentially reducing convergence issues increasing power. Moreover, researchers interested called ‘stationarity’ constraints theoretical reasons. Disadvantages constraints assume certain parameters time change. might assumption researchers willing make, especially developmental contexts expect lagged effects might change time (e.g., variable wA gets important driving wB one gets older). Therefore, default constraints = \"none\", implying lagged effects, within-components (residual) variances covariances freely estimated time. Constraint options include: constraints = \"lagged\": autoregressive cross-lagged effects constrained equal time. constraints = \"residuals: within-unit residual variances covariance (wave 2 onwards) constrained equal time. constraints = \"within\": lagged effects residual variances covariances constrained equal time. constraints = \"stationary\": Constraints imposed variances within-components first wave, residual variances wave 2 , variances within-components 1. implies variances first wave fixed 1, residual variances function lagged effects, correlation within-components wave. constraints deduced supplementary materials Mulder Hamaker (see FAQ “can constrain standardized parameters invariant time?”). constraints = \"\": Constraints imposed measurement error variances across time. constraint possible est_ME = TRUE.","code":""},{"path":"/articles/extensions.html","id":"measurment-error","dir":"Articles","previous_headings":"","what":"Measurment error","title":"Extensions","text":"generally advisable include measurement error analyzing psychological data, RI-CLPM include . Adding measurement error model result bivariate Trait State Error (TSE) model Kenny Zautra (1995), requires least 4 waves data identified. Users can add measurement error variances estimation model setting est_ME argument est_ME = TRUE. Measurement error can added simulated data using reliability argument. Note, however, model (bivariate TSE) shown prone empirical -identification, often requiring upwards 8 waves data sample sizes larger 500.","code":""},{"path":"/articles/FAQ.html","id":"extensions","dir":"Articles","previous_headings":"","what":"Extensions","title":"FAQ","text":"RI-CLPM multiple indicators Unfortunately, powRICLPM package functionality (yet) include multiple indicator extensions RI-CLPM. However, one can use Mplus’s Monte Carlo functionalities specify multiple indicator RI-CLPMs (MI-RICLPM) simulate power. Furthermore, general comments made effect including multiple indicators power. example, Oertzen, Hertzog, Lindenberger, Ghisletta (2010) claim separation measurement error true score variance increases power, principle generalizes structural equation models, regardless regression model linking latent variables. implies MI-RICLPM’s power basic RI-CLPM. verify , small simulation study performed using Mplus (model syntax simulations can found GitHub). 10,000 datasets generated MI-RICLPM latent factor per occasion three indicators. factors contain trait-like part captured higher-order random intercepts, state-like part used capture dynamics time (see bottom panel Figure 3 Mulder Hamaker, 2021). factor loadings linking indicators latent factor set 1, measurement error variances set 0.5, cross-lagged effects fixed 0.2. population parameter values kept illustrative example Mulder (review), implying proportion measurement error observed variables \\(20\\%\\). simulated data sets analysed using MI-RICLPM generated data (separates measurement error variance), basic RI-CLPM (assuming measurement error, using first indicator). Results show power detect non-zero lagged effects indeed larger MI-RICLPM (ranging 0.89 0.93 standardized cross-lagged effects 0.2, 0.927 0.939 standardized autoregressive effects 0.3) basic RI-CLPM (ranging 0.70 0.74 standardized cross-lagged effects 0.2, 0.807 0.827 standardized autoregressive effects 0.3). , inclusion multiple indicators complicates RI-CLPM power analysis, can generally stated separation measurement error true score variance extension multiple indicators beneficial power detect lagged effects. measurements, especially social behavioural sciences prone include measurement error, extension may well-worth considering power point--view. multiple indicator RI-CLPM multiple group RI-CLPM based fitting multiple group version RI-CLPM without constraints across groups (e.g., constraint equal lagged effects), comparing model fit determine whether imposed constraints tenable. Power thus refers probability rejecting bad-fitting model due untenable across-group constraints context, rather rejecting null-hypothesis specific parameter. effect size refers much worse constrained model fits data compared general model (less, across-group constraints). Analytic solutions, like likelihood ratio test Satorra Saris (1985) power analyses based RMSEA MacCallum, Browne, Sugawara (1996), efficient use types power analyses computationally intensive Monte Carlo simulation studies. See, example, SSpower() function R-package semTools multiple group SEM power analysis Jak, Jorgensen, Verdam, Oort, Elffers (2020), Jorgensen, Pornprasertmanit, Schoeman, Rosseel (2021).","code":""},{"path":"/articles/mplus.html","id":"steps-1-and-2-experimental-conditions-and-population-parameter-values","dir":"Articles","previous_headings":"","what":"Steps 1 and 2: Experimental conditions and population parameter values","title":"Using Mplus","text":"example, investigate power detect small standardized cross-lagged effect \\(0.2\\) sample sizes 100 1000 (incremental steps 50) RI-CLPM 3, 4 5 repeated measures. total, results \\(19 \\times 3 = 57\\) experimental conditions. Moreover, following example Getting started Vignette, population parameter values :","code":"Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = T) # The .2 refers to our standardized cross-lagged effect of interest wSigma <- matrix(c(1, .3, .3, 1), ncol = 2, byrow = T) ICC <- 0.5 RI_cor <- 0.3"},{"path":"/articles/mplus.html","id":"steps-3-5-perform-the-power-analysis","dir":"Articles","previous_headings":"","what":"Steps 3-5: Perform the power analysis","title":"Using Mplus","text":"create Mplus model syntax, use powRICLPM_Mplus() function. must provide: range sample sizes simulate power using search_lower, search_upper, search_step arguments, number repeated measures using time_points argument, population values Phi, wSigma, ICC, RI_cor, number MCMC replications want perform per condition reps argument, seed control starting point random number generator, save_path, denoting directory save Mplus input file . example, specify: powRICLPM_Mplus() creates Mplus input file (multiple files multiple experimental conditions specified) writes specified directory. file contains Mplus model syntax needed run power analysis RI-CLPM Mplus. information Monte Carlo simulations Mplus can found http://statmodel.com/download/usersguide/Chapter12.pdf.","code":"powRICLPM_Mplus(search_lower = 100,                 search_upper = 1000,                 search_step = 50,                 time_points = c(3, 4, 5),                 ICC = 0.5,                 RI_cor = 0.3,                 Phi = Phi,                 wSigma = wSigma,                 reps = 10000,                 seed = 123456,                 save_path = \"./saved\")"},{"path":"/articles/mplus.html","id":"step-6-summarize-results","dir":"Articles","previous_headings":"","what":"Step 6: Summarize results","title":"Using Mplus","text":"get output, run Mplus model syntax file Mplus. time, .(text file) created summarizing results Mplus power analysis. good source interpreting output context MONTECARLO study Muthén Muthén (2002).","code":""},{"path":"/articles/Mulder2022.html","id":"preliminary-analysis","dir":"Articles","previous_headings":"","what":"Preliminary analysis","title":"Example","text":"First, Monte Carlo power analysis performed 171 experimental conditions using limited number replications (reps = 100). preliminary results serve basis selecting experimental conditions show promising results (.e., meet desired power- accuracy levels). conditions validated using large number replications (reps = 2000) next step. R-code preliminary analysis can found :","code":"# Matrix of standardized lagged effects Phi <- matrix(c(0.20, 0.10, 0.15, 0.30), byrow = FALSE, ncol = 2)  # Correlation matrix of within-components wSigma <- matrix(c(1, 0.26, 0.26, 1), byrow = FALSE, ncol = 2)  # powRICLPM automatically computes Psi based on Phi and wSigma  # Setup parallel processing to speed up computations plan(multisession, workers = 6)  # Perform preliminary power analysis (with progress bar) with_progress({   out_preliminary <- powRICLPM(target_power = 0.8,                                search_lower = 200,                                search_upper = 2000,                                search_step = 100,                                time_points = c(3, 4, 5),                                ICC = c(0.3, 0.5, 0.7),                                RI_cor = 0.35,                                 Phi = Phi,                                wSigma = wSigma,                                reps = 100,                                 seed = 123456) })  # Tabular summary of results summary(out_preliminary) res_wB2wA1 <- give(out_preliminary, what = \"results\", parameter = \"wB2~wA1\")  # Visualize power p <- plot(x = out_preliminary, parameter = \"wB2~wA1\")  # Tailor visualization for Mulder (under review) p <- p +    labs(color = \"Number of time points\") +   scale_x_continuous(name = \"Sample size\",                      breaks = seq(200, 2000, 200),                      guide = guide_axis(n.dodge = 2)) +   theme(legend.position = \"bottom\") p ggsave(\"Mulder2022_preliminary_power.png\", height = 5, width = 7)"},{"path":"/articles/Mulder2022.html","id":"validation","dir":"Articles","previous_headings":"","what":"Validation","title":"Example","text":"preliminary results suggest least 4 time-points sample size upwards 1000 required condition advantageous proportion -unit variance (proportion -unit variance 0.3). conditions 0.7 proportion -unit variance, sample sizes approximately 1500 needed 5 repeated measures, whereas sample sizes upwards 1700 needed 4 repeated measures. Based results, following experimental conditions validation selected: range sample sizes reduced 900 1800, experimental conditions 3 repeated measures omitted. results total 10 sample sizes \\(\\times\\) 2 numbers repeated measures \\(\\times\\) 3 proportions -unit variance, totaling 60 experimental conditions validation.","code":"# Setup parallel processing to speed up computations plan(multisession, workers = 6)  # Perform preliminary power analysis (with progress bar) with_progress({   out_validation <- powRICLPM(target_power = 0.8,                               search_lower = 900,                               search_upper = 1800,                               search_step = 100,                               time_points = c(4, 5),                               ICC = c(0.3, 0.5, 0.7),                               RI_cor = 0.35,                                Phi = Phi,                               wSigma = wSigma,                               reps = 2000,                                seed = 123456) })  # Tabular summary of results summary(out_validation, parameter = \"wB2~wA1\") res_wB2wA1 <- give(out_validation, what = \"results\", parameter = \"wB2~wA1\")  # Visualize power p2 <- plot(out_validation, parameter = \"wB2~wA1\")  # Tailor visualization of power for Mulder (2022) p2 <- p2 +    labs(color = \"Number of time points\") +   scale_x_continuous(name = \"Sample size\",                      breaks = seq(900, 1800, 100),                      guide = guide_axis(n.dodge = 2)) +   scale_color_manual(values = c(\"#00BA38\", \"#619CFF\")) +   theme(legend.position = \"bottom\") p2 ggsave(\"Mulder2022_validation_power.png\", height = 5, width = 7)"},{"path":"/articles/start.html","id":"steps-1-experimental-conditions","dir":"Articles","previous_headings":"","what":"Steps 1: Experimental conditions","title":"Getting started","text":"performing power analysis, must first determine experimental conditions interest. Experimental conditions (: simulation conditions) defined characteristics study design can impact statistical power. includes characteristics like sample size number repeated measures. must decide number repeated measures used simulations, well range sample sizes want simulate power. example, take sample size range 100 1000 first, increasing steps 100. let numbers repeated measures range 3 5. experimental conditions lead desired amount power detecting small cross-lagged effect, ranges can extended.","code":""},{"path":"/articles/start.html","id":"steps-2-choosing-population-parameter-values","dir":"Articles","previous_headings":"","what":"Steps 2: Choosing population parameter values","title":"Getting started","text":"Next, must determine population parameter values generating data RI-CLPM. requires specification : Phi: Standardized autoregressive cross-lagged effects within-unit components model. values collected matrix columns representing predictors rows representing outcomes. wSigma: correlation matrix within-unit components. ICC: proportion variance -unit level (relative total variance). RI_cor: correlation random intercepts. example, parameter values set :","code":"Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = T) # The .2 refers to our standardized cross-lagged effect of interest wSigma <- matrix(c(1, .3, .3, 1), ncol = 2, byrow = T) ICC <- 0.5 RI_cor <- 0.3"},{"path":"/articles/start.html","id":"steps-3-5-performing-the-power-analysis","dir":"Articles","previous_headings":"","what":"Steps 3-5: Performing the power analysis","title":"Getting started","text":"Steps 3 5 automated powRICLPM function. input, must provide: desired power level using target_power argument, range sample sizes simulate power using search_lower, search_upper, search_step arguments (alternatively, can specify directly providing vector sample sizes sample_size argument), number time points simulated data using time_points argument, population values Phi, wSigma, ICC, RI_cor, number Monte Carlo replications want perform per experimental condition reps argument. Optionally, can specify: skewness kurtosis: integer (vector) determines skewness kurtosis simulated observed variables, respectively. Suppose reason believe \\(\\) \\(B\\) variables positively skewed, heavy tails (.e., higher kurtosis) can include arguments skewness = 1 kurtosis = 0.5 (defaults: 0). alpha: numeric value denoting significance criterion (default: 0.05). seed: integer control starting point random number generator. important use want replicate results. reliability: numeric value representing reliability indicators (.e., proportion true score variance) (default: 1) constraints, bounds, est_ME arguments can set well extend basic power analysis setup, described Vignette Extensions. example, can perform power analysis running:","code":"output <- powRICLPM(target_power = 0.8,                     search_lower = 100,                     search_upper = 1000,                     search_step = 50,                     time_points = c(3, 4, 5),                     ICC = ICC,                     RI_cor = RI_cor,                      Phi = Phi,                     wSigma = wSigma,                     reps = 1000)"},{"path":"/articles/start.html","id":"parallel-processing-using-furrr","dir":"Articles","previous_headings":"Steps 3-5: Performing the power analysis","what":"Parallel processing using furrr","title":"Getting started","text":"Performing Monte Carlo power analysis large number replications, across multiple simulation conditions (illustrative example, 57 experimental conditions) can take lot time. speed process, recommended perform power analysis across simulation conditions parallel (.e., multiple cores). powRICLPM() function implemented future’s parallel processing capabilities using furrr package. Load furrr package, use plan() function change power analysis execution sequential (.e., single-core, default), multisession (.e., multicore). Use workers argument plan() specify many cores want use. Next, run powRICLPM analysis, power analysis run specified number cores. can result significant reduction computing time. information parallel execution strategies, see ?furrr::plan().","code":""},{"path":"/articles/start.html","id":"progress-bar-using-progressr","dir":"Articles","previous_headings":"Steps 3-5: Performing the power analysis","what":"Progress bar using progressr","title":"Getting started","text":"can useful get approximation progress powRICLPM analysis running code, especially running analysis parallel. powRICLPM() implemented progress notifications using progressr package. Simply put, two options can get progress notifications: can subscribe progress updates specific expression wrapping expression with_progress({...}). can subscribe progress updates everywhere running handlers(global = T). second option fully developed yet furrr package, instead focus first. Implementing with_progress({...}) option, well parallel execution powRICLPM analysis, results code: information progress notification options using progressr end-users, including auditory email updates, see https://progressr.futureverse.org.","code":"# Load the furrr package library(furrr)  # Check how many cores are available future::availableCores()  # Plan the powRICLPM analysis to run on 1 core less than the number of available cores plan(multisession, workers = 7) # For the case of 8 available cores  # Run the powRICLPM analysis  with_progress({ # Subscribe to progress updates   output <- powRICLPM(target_power = 0.8, # The actual power analysis function                       search_lower = 100,                       search_upper = 1000,                       search_step = 50,                       time_points = c(3, 4, 5),                       ICC = ICC,                       RI_cor = RI_cor,                        Phi = Phi,                       wSigma = wSigma,                       reps = 1000,                       parameter = `wB2~wA1`) })  # Revert back to sequential execution of code upon completion of the analysis plan(sequential)"},{"path":"/articles/start.html","id":"step-6-summarize-results","dir":"Articles","previous_headings":"","what":"Step 6: Summarize results","title":"Getting started","text":"powRICLPM() function creates powRICLPM object: list results, upon can call print(), summary(), give(), plot() functions print, summarize, extract results, optionally visualize results analysis, respectively. print() outputs textual summary power analysis design contained within object called upon. output performance metrics computed power analysis. summary() can used one four ways. First, summary can used simply like print() get information design power analysis (different experimental conditions), well number problems occured per condition (e.g., non-convergence, fatal estimation errors, inadmissible results). Second, specifying parameter = \"...\" argument summary(), function print results specifically parameter across experimental conditions. Third, specify specific experimental condition (specifying sample size, number time points ICC using sample_size, time_points, ICC arguments), function displays performance measures parameters experimental condition. give() extracts various bits information powRICLPM object. exact information extracted given = \"...\" argument: = \"conditions\" gives different experimental conditions per row, condition defined unique combination sample size, number time points ICC. = \"estimation_problems\" gives proportion fatal errors, inadmissible values, non-converged estimations (columns) per experimental conditions (row). = \"results\" gives average estimate Avg, minimum estimate Min, standard deviation parameter estimates stdDev, average standard error SEavg, mean square error MSE, average width confidence interval Acc, coverage rate Cov, proportion times p-value lower significance criterion Pow. requires setting parameter = \"...\" argument. = \"names\" gives parameter names contained within powRICLPM object. Finally, plot() creates ggplot2-plot specific parameter (specified using parameter = \"...\" argument) sample size x-axis, simulated power y-axis, lines grouped number time-points, plots wrapped proportion -unit variance. plot() returns ggplot2 object can fully customized using ggplot2 functionality. example, can change scales, add titles, change geoms, etc. information options ggplot2 framework can found https://ggplot2-book.org/index.html. example, add title change labels x-axis:","code":"# 1. General results summary(output)  # 2. Get (slightly) more detailed parameter-specific information summary(output, parameter = \"wB2~wA1\")  # 3. Display parameter-specific and condition-specific performance metrics summary(output, sample_size = 400, time_points = 4, ICC = 0.5) # 1. Extract experimental conditions give(output, what = \"conditions\")  # 2. Extract estimation problems give(output, what = \"estimation_problems\")  # 3. Extract results for cross-lagged effect \"wB2~wA1\"  give(output, what = \"results\", parameter = \"wB2~wA1\")  # 4. Extract parameter names give(output, what = \"names\") # Create basic plot of powRICLPM object p <- plot(output, parameter = \"wB2~wA1\") p  # Adjust plot aesthetics p2 <- p +    labs(title = \"Power analysis for RI-CLPM\",        caption = \"Based on 1000 replications.\") +   scale_x_continuous(name = \"Sample size\",                      breaks = seq(100, 1000, 100),                      guide = guide_axis(n.dodge = 2)) p2"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeroen Mulder. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mulder J (2022). powRICLPM: Power analysis random intercept cross-lagged panel model. R package version 0.0.0.9004, http://jeroen.d.mulder.github.io/powRICLPM.","code":"@Manual{,   title = {powRICLPM: Power analysis for the random intercept cross-lagged panel model},   author = {Jeroen Mulder},   year = {2022},   note = {R package version 0.0.0.9004},   url = {http://jeroen.d.mulder.github.io/powRICLPM}, }"},{"path":"/index.html","id":"powriclpm","dir":"","previous_headings":"","what":"Power analysis for the RI-CLPM","title":"Power analysis for the RI-CLPM","text":"powRICLPM R package performs power analysis random intercept cross-lagged panel model (RI-CLPM) simple user-friendly way. implements strategy proposed Mulder (review). main functionalities include: Setting performing basic power analysis: Obtain power reject null-hypothesis effect (well performance measures, bias, mean square error, etc.) parameters RI-CLPM given specific sample size, number repeated measures, proportion -unit variance (amongst things). can done across multiple experimental conditions simultaneously (.e., across varying numbers repeated measures, proportions -unit variance, etc.). Extending basic power analyis setup: includes option perform bounded estimation imposing various (stationarity) constraints time parameters estimation model. Create Mplus model syntax: Create syntax performing RI-CLPM power analysis using Mplus.","code":""},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Power analysis for the RI-CLPM","text":"Every user-facing function package documented, documentation can accessed running ?function_name R console, e.g., ?powRICLPM. function references contain explanations use functions, well technical details. Furthermore, four main vignettes (accessible via ‘Vignettes’ tab), describing functionalities analysis options package generally. ‘Example’ vignette serves supplementary material Mulder (review), contains R code illustrative example using powRICLPM package. rationale power analysis strategy implemented can found Mulder (review). Finally, FAQ contains answers frequently asked question reach via email.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Power analysis for the RI-CLPM","text":"can install development version powRICLPM GitHub :","code":"install.packages(\"devtools\") devtools::install_github(\"jeroendmulder/powRICLPM\")"},{"path":"/index.html","id":"citing-powriclpm","dir":"","previous_headings":"","what":"Citing powRICLPM","title":"Power analysis for the RI-CLPM","text":"can cite R-package following citation: Mulder, J.D., (n.d.). Performing power analysis RI-CLPM","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Power analysis for the RI-CLPM","text":"ideas, comments, issues like raise, please get touch. Issues ideas can raised GitHub via https://github.com/jeroendmulder/powRICLPM Pull request can created GitHub via https://github.com/jeroendmulder/powRICLPM/pulls","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Jeroen D. Mulder Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/coef.powRICLPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract results from powRICLPM analysis — coef.powRICLPM","title":"Extract results from powRICLPM analysis — coef.powRICLPM","text":"S3 method class `powRICLPM`. coef.powRICLPM extracts power analysis results across experimental conditions, specific parameter. See \"Details\" list measures extracted.","code":""},{"path":"/reference/coef.powRICLPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract results from powRICLPM analysis — coef.powRICLPM","text":"","code":"# S3 method for powRICLPM coef(object, ..., parameter = NULL)"},{"path":"/reference/coef.powRICLPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract results from powRICLPM analysis — coef.powRICLPM","text":"object powRICLPM object. ... Additional arguments affecting results extracted produced. parameter character string denoting parameter interest.","code":""},{"path":"/reference/coef.powRICLPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract results from powRICLPM analysis — coef.powRICLPM","text":"data.frame rows representing experimental conditions, columns representing metrics.","code":""},{"path":"/reference/coef.powRICLPM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract results from powRICLPM analysis — coef.powRICLPM","text":"measures extracted experimental condition: errors: number replications ended fatal error. not_converged: number replications converge solution. inadmissible: number replications resulted inadmissible results parameters (e.g., negative variances). avg: average parameter estimate replications. stdDev: standard deviation parameter estimates across replications. SEAvg: average standard error across replications. mse: mean square error. acc: average width confidence interval. cover: coverage rate confidence interval defined significance criterion (default alpha = .05). pwr: proportion times p-value lower significance criterion.","code":""},{"path":"/reference/compute_Psi.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Residual Variances of Lagged Within-Components — compute_Psi","title":"Compute Residual Variances of Lagged Within-Components — compute_Psi","text":"Within RI-CLPM context, function computes variance-covariance matrix within-unit residuals wave 2 later, given lagged effects Phi observed variance-covariance matrix Sigma.","code":""},{"path":"/reference/compute_Psi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Residual Variances of Lagged Within-Components — compute_Psi","text":"","code":"compute_Psi(Phi, wSigma)"},{"path":"/reference/compute_Psi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Residual Variances of Lagged Within-Components — compute_Psi","text":"Phi matrix standardized autoregressive cross-lagged effects population. Columns represent predictors rows represent outcomes. wSigma correlation matrix within-unit components.","code":""},{"path":"/reference/compute_Psi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Residual Variances of Lagged Within-Components — compute_Psi","text":"variance-covariance matrix within-unit residuals wave 2 later.","code":""},{"path":"/reference/compute_Psi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Residual Variances of Lagged Within-Components — compute_Psi","text":"function based Equation (3.26) Kim Nelson (1999, p. 27).","code":""},{"path":"/reference/compute_RI_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Random Intercept Correlation — compute_RI_cov","title":"Compute Random Intercept Correlation — compute_RI_cov","text":"Compute Random Intercept Correlation","code":""},{"path":"/reference/compute_RI_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Random Intercept Correlation — compute_RI_cov","text":"","code":"compute_RI_cov(RI_cor, RI_var)"},{"path":"/reference/compute_RI_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Random Intercept Correlation — compute_RI_cov","text":"RI_var numeric value denoting variance random intercepts. RI_cov numeric value denoting covariance random intercepts.","code":""},{"path":"/reference/compute_RI_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Random Intercept Correlation — compute_RI_cov","text":"scalar representing correlation random intercepts.","code":""},{"path":"/reference/compute_RI_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Random Intercept Variance\r\n\r\nCompute the variance of the random intercept based on the proportion of between-unit variance (ICC) and conditional on within-unit variances of 1. — compute_RI_var","title":"Compute Random Intercept Variance\r\n\r\nCompute the variance of the random intercept based on the proportion of between-unit variance (ICC) and conditional on within-unit variances of 1. — compute_RI_var","text":"Compute Random Intercept Variance Compute variance random intercept based proportion -unit variance (ICC) conditional within-unit variances 1.","code":""},{"path":"/reference/compute_RI_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Random Intercept Variance\r\n\r\nCompute the variance of the random intercept based on the proportion of between-unit variance (ICC) and conditional on within-unit variances of 1. — compute_RI_var","text":"","code":"compute_RI_var(ICC)"},{"path":"/reference/compute_RI_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Random Intercept Variance\r\n\r\nCompute the variance of the random intercept based on the proportion of between-unit variance (ICC) and conditional on within-unit variances of 1. — compute_RI_var","text":"ICC `double` denoting proportion variance -unit level.","code":""},{"path":"/reference/compute_RI_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Random Intercept Variance\r\n\r\nCompute the variance of the random intercept based on the proportion of between-unit variance (ICC) and conditional on within-unit variances of 1. — compute_RI_var","text":"scalar representing random intercept variance.","code":""},{"path":"/reference/create_lavaan.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","title":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","text":"Creates lavaan parameter table model syntax specified model.","code":""},{"path":"/reference/create_lavaan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","text":"","code":"create_lavaan(   time_points,   RI_var = NULL,   RI_cov = NULL,   Phi = NULL,   wSigma = NULL,   Psi = NULL,   syntax = FALSE,   estimation = FALSE,   constraints )"},{"path":"/reference/create_lavaan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","text":"time_points integer (vector) elements larger 3, indicating number time points. RI_var Numeric value denoting random intercept variance. RI_cov Numeric value denoting covariance random intercepts. Phi matrix standardized autoregressive cross-lagged effects population. Columns represent predictors rows represent outcomes. wSigma correlation matrix within-unit components. Psi Variance-covariance matrix within-unit residuals wave 2 onwards. syntax Logical indicating whether model syntax created. estimation Logical indicator whether lavaan model syntax inteded simulate data. FALSE, lavaan syntax created estimation data. constraints character string specifying RI-CLPM parameters constrained time estimation model. \"lagged\" refers cross-lagged autoregressive effects, \"residuals\" refers residual variances, \"within\" refers lagged effects residual variances, \"stationarity\" imposes stationarity constraints lagged effects residual variances. default, lagged effects residual variances allowed vary freely time.","code":""},{"path":"/reference/create_lavaan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","text":"data frame containing model parameters (parameter elements characters).","code":""},{"path":[]},{"path":"/reference/create_lavaan.html","id":"data-generation","dir":"Reference","previous_headings":"","what":"Data generation","title":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","text":"lavaan model syntax needs created data generation, user must provide values ICC, RI_cor, Phi, wSigma, Psi arguments. default, arguments set NULL, model syntax made parameter table, parameters estimated rather set.","code":""},{"path":"/reference/create_lavaan.html","id":"naming-conventions","dir":"Reference","previous_headings":"","what":"Naming conventions","title":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","text":"Details naming conventions can found \"Details\" section powRICLPM.","code":""},{"path":"/reference/create_Mplus.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Mplus Model Syntax for RICLPM Power Analysis — create_Mplus","title":"Create Mplus Model Syntax for RICLPM Power Analysis — create_Mplus","text":"Creates Mplus model syntax Monte Carlo power analysis random intercept cross-lagged panel model (RI-CLPM).","code":""},{"path":"/reference/create_Mplus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Mplus Model Syntax for RICLPM Power Analysis — create_Mplus","text":"","code":"create_Mplus(input)"},{"path":"/reference/create_Mplus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Mplus Model Syntax for RICLPM Power Analysis — create_Mplus","text":"input list elements representing input Monte Carlo power analysis. See \"Details\" required elements input.","code":""},{"path":[]},{"path":"/reference/create_Mplus.html","id":"input","dir":"Reference","previous_headings":"","what":"Input","title":"Create Mplus Model Syntax for RICLPM Power Analysis — create_Mplus","text":"input argument must contain following elements: sample_size: sample size. time_points: number time points. ICC: proportion -unit variance. RI_var: random intercept variance. RI_cov: covariance random intercepts. Phi: matrix standardized autoregressive cross-lagged effects. wSigma: correlation matrix within-components. Psi: Residual variance-covariance matrix within-components. reps: Number replications. seed: integer length 1. save_path: directory (data) save Mplus model syntax . constraints: constraints imposed estimation model.","code":""},{"path":"/reference/create_Mplus.html","id":"naming-conventions","dir":"Reference","previous_headings":"","what":"Naming conventions","title":"Create Mplus Model Syntax for RICLPM Power Analysis — create_Mplus","text":"Details naming conventions can found \"Details\" section powRICLPM.","code":""},{"path":"/reference/give.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract information from powRICLPM object — give","title":"Extract information from powRICLPM object — give","text":"give() can used extract information stored within powRICLPM object. See \"Details\" pieces information can extracted. information presented condition (.e., sample size, number time points, ICC).","code":""},{"path":"/reference/give.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract information from powRICLPM object — give","text":"","code":"give(from, what, parameter = NULL)"},{"path":"/reference/give.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract information from powRICLPM object — give","text":"powRICLPM object character string denoting information extract, either \"conditions\", \"estimation_problems\", \"results\", \"names\". parameter (optional) = \"results\", character string denoting parameter extract results .","code":""},{"path":"/reference/give.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract information from powRICLPM object — give","text":"data.frame.","code":""},{"path":"/reference/give.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract information from powRICLPM object — give","text":"following information can extracted powRICLPM object: conditions: data.frame different experimental conditions per row, condition defined unique combination sample size, number time points ICC. estimation_problems: proportion fatal errors, inadmissible values, non-converged estimations (columns) per experimental conditions (row). results: average estimate (Avg), minimum estimate (Min), standard deviation parameter estimates (stdDev), average standard error (SEavg), mean square error (MSE), average width confidence interval (Acc), coverage rate (Cov), proportion times *p*-value lower significance criterion (Pow). requires setting parameter = \"...\" argument. names: parameter names condition least parameters (.e., parameter names apply experimental condition).","code":""},{"path":"/reference/give.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract information from powRICLPM object — give","text":"","code":"if (FALSE) { give(out1, \"estimation_problems\") give(out1, \"results\", parameter = \"wB2~wA1\") }"},{"path":"/reference/plot.powRICLPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot results from powRICLPM object — plot.powRICLPM","title":"Plot results from powRICLPM object — plot.powRICLPM","text":"plot.powRICLPM() visualizes (using ggplot2) estimated power across experimental conditions within powRICLPM object, specific parameter. plots display relation sample size (x-axis) power (y-axis), grouped number time points, wrapped proportion -unit variance.","code":""},{"path":"/reference/plot.powRICLPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot results from powRICLPM object — plot.powRICLPM","text":"","code":"# S3 method for powRICLPM plot(x, y, ..., parameter = NULL)"},{"path":"/reference/plot.powRICLPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot results from powRICLPM object — plot.powRICLPM","text":"x powRICLPM object. y (use) ... (use) parameter Character string length denoting parameter visualize results .","code":""},{"path":"/reference/plot.powRICLPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot results from powRICLPM object — plot.powRICLPM","text":"ggplot2 object.","code":""},{"path":[]},{"path":"/reference/plot.powRICLPM.html","id":"manually-creating-plots","dir":"Reference","previous_headings":"","what":"Manually creating plots","title":"Plot results from powRICLPM object — plot.powRICLPM","text":"plot.powRICLPM() creates arguably obvious plot context power analysis: relation power sample size. However, powRICLPM computes several metrics (e.g., accuracy, coverage rate, etc.) researchers might want plot. end, suggest users use give() collect metrics, across experimental conditions, specific parameter, data frame first. , users can use plotting function like create manual plot. See \"Details\" give() list measures computed function.","code":""},{"path":[]},{"path":"/reference/powRICLPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Power analysis for the RI-CLPM — powRICLPM","title":"Power analysis for the RI-CLPM — powRICLPM","text":"powRICLPM() performs Monte Carlo power analysis random intercept cross-lagged panel model (RI-CLPM). computes performance metrics (e.g., bias, mean square error, coverage, power, etc) RI-CLPM parameters, can perform power analysis across multiple experimental conditions simultaneously. Conditions defined terms sample size, number time points, proportion -unit variance (ICC). See \"Details\" information ) data simulation model estimation, b) internal naming conventions parameters, c) option include measurement errors various constraints, d) parallel execution capabilities speeding analysis.","code":""},{"path":"/reference/powRICLPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power analysis for the RI-CLPM — powRICLPM","text":"","code":"powRICLPM(   target_power,   search_lower = NULL,   search_upper = NULL,   search_step = 20,   sample_size = NULL,   time_points,   ICC,   RI_cor,   Phi,   wSigma,   reliability = 1,   skewness = 0,   kurtosis = 0,   est_ME = FALSE,   alpha = 0.05,   reps = 20,   bootstrap_reps = 1000,   seed = NA,   constraints = \"none\",   bounds = FALSE,   estimator = NA )"},{"path":"/reference/powRICLPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power analysis for the RI-CLPM — powRICLPM","text":"target_power numeric value 0 1, denoting targeted power level. search_lower positive integer, denoting lower bound range sample sizes. search_upper positive integer, denoting upper bound range sample sizes. search_step positive integer, denoting increment sample size. sample_size (optional) integer (vector), indicating specific sample sizes evaluate power, rather specifying range using search_ arguments. time_points integer (vector) elements least larger 3, indicating number time points. ICC double (vector), denoting proportion variance -unit level. RI_cor double, denoting correlation random intercepts. Phi matrix, standardized autoregressive effects (diagonal) cross-lagged effects (-diagonal) population. Columns represent predictors rows represent outcomes. wSigma correlation matrix within-unit components. reliability (optional) numeric value 0 1, denoting reliability variables. skewness (optional) numeric value, denoting skewness values observed variables (see simulateData). kurtosis (optional) numeric value, denoting excess kurtosis values (.e., compared kurtosis normal distribution) observed variables (see simulateData). est_ME (optional) logical, denoting measurement error variance estimated RI-CLPM (see \"Details\"). alpha (optional) double, denoting significance criterion. reps positive integer, denoting number Monte Carlo replications used simulations. bootstrap_reps (optional) positive integer, denoting number bootstrap samples use quantifying uncertainty around power analysis results. seed `integer` length 1. multiple cores used, seed length 1 used generate full L'Ecuyer-CMRG seed cores (see furrr_options). constraints (optional) character string, specifying type constraints imposed estimation model (see \"Details\"). bounds (optional) logical, denoting bounded estimation used latent variable variances model (see \"Details\"). estimator (options) character, denoting estimator used (see \"Details\").","code":""},{"path":"/reference/powRICLPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power analysis for the RI-CLPM — powRICLPM","text":"list containing conditions session element. condition list experimental conditions, element list containing input output power analysis particular experimental condition. session list containing information common experimental conditions.","code":""},{"path":"/reference/powRICLPM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Power analysis for the RI-CLPM — powRICLPM","text":"rationale power analysis strategy implemented package can found Mulder (2022).","code":""},{"path":"/reference/powRICLPM.html","id":"data-generation-and-model-estimation","dir":"Reference","previous_headings":"","what":"Data generation and model estimation","title":"Power analysis for the RI-CLPM — powRICLPM","text":"Data generated using simulateData lavaan package. Based Phi wSigma, residual variances covariances within-components wave 2 later computed, within-components variance 1. implies lagged effects Phi can interpreted standardized effects. Data analyzed using lavaan lavaan package. default estimator maximum likelihood. maximum likelihood based estimators implemented lavaan can specified well. skewed kurtosed data generated (using skewness kurtosis arguments), estimator defaults robust maximum likelihood (.e., estimator = \"MLR\"). population parameter values used starting values. Parameter estimates unconverged model solutions discarded results. However, parameter estimates solutions inadmissible parameter estimates (e.g., negative random intercept variance), included results. results include minimum estimates parameters across replications. can used diagnose parameter cause inadmissible solution.","code":""},{"path":"/reference/powRICLPM.html","id":"naming-conventions-for-observed-and-latent-variables","dir":"Reference","previous_headings":"","what":"Naming conventions for observed and latent variables","title":"Power analysis for the RI-CLPM — powRICLPM","text":"observed variables RI-CLPM given default names, namely capital letters alphabetical order, numbers denoting measurement occasion. example, bivariate RICLPM 3 time points, observe A1, A2, A3, B1, B2, B3. within-components denoted wA1, wA2, ..., wB3, respectively. -components RI_ prepended variable name, resulting RI_A RI_B. Parameters denoted using lavaan model syntax (see lavaan website). example, random intercept variances denoted RI_A~~RI_A RI_B~~RI_B, cross-lagged effects first wave wB2~wA1 wA2~wB1, autoregressive effects wA2~wA1 wB2~wB1. Use give(object, \"names\") extract parameter names powRICLPM object.","code":""},{"path":"/reference/powRICLPM.html","id":"imposing-constraints","dir":"Reference","previous_headings":"","what":"Imposing constraints","title":"Power analysis for the RI-CLPM — powRICLPM","text":"following constraints can imposed estimation model using constraints = \"...\" argument: lagged: Time-invariant autoregressive cross-lagged effects.   residuals: Time-invariant residual variances.   within: Time-invariant lagged effects residual variances.   stationarity: Constraints within-unit level stationary process estimated. included time-invariant lagged effects, constraints residual variances.   : Time-invariant measurement error variances. possible est_ME = TRUE.","code":""},{"path":"/reference/powRICLPM.html","id":"bounded-estimation","dir":"Reference","previous_headings":"","what":"Bounded estimation","title":"Power analysis for the RI-CLPM — powRICLPM","text":"Bounded estimation useful avoid nonconvergence small samples (< 100). , automatic wide bounds used advised De Jonckere Rosseel (2022; see optim.bounds lavOptions). option can used constraints imposed estimation model.","code":""},{"path":"/reference/powRICLPM.html","id":"parallel-processing-using-furrr","dir":"Reference","previous_headings":"","what":"Parallel processing using furrr","title":"Power analysis for the RI-CLPM — powRICLPM","text":"speed analysis, power analysis multiple experimental conditions can executed parallel. implemented using furrr. default analysis executed sequentially (.e., single-core). Parallel execution (.e., multicore) can setup using plan, example plan(multisession, workers = 4). information options, see https://furrr.futureverse.org.","code":""},{"path":"/reference/powRICLPM.html","id":"progress-bar-using-progressr","dir":"Reference","previous_headings":"","what":"Progress bar using progressr","title":"Power analysis for the RI-CLPM — powRICLPM","text":"progress bar displaying status power analysis implemented using progressr. default, simple progress bar shown. information control progress bar several notification options (e.g., auditory notifications), see https://progressr.futureverse.org.","code":""},{"path":[]},{"path":"/reference/powRICLPM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Power analysis for the RI-CLPM — powRICLPM","text":"Jeroen D. Mulder j.d.mulder@uu.nl","code":""},{"path":"/reference/powRICLPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power analysis for the RI-CLPM — powRICLPM","text":"","code":"# Example - Simulate power across range of sample sizes # Define population parameters for lagged effects and within-component correlations Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = TRUE) wSigma <- matrix(c(1, .3, .3, 1), ncol = 2, byrow = TRUE)  # Setup parallel computing (multicore, speeding up the analysis) if (FALSE) { library(furrr) library(progressr) plan(multisession, workers = 4)  # Run preliminary analysis (with limited \"reps\") with_progress({   out1 <- powRICLPM(     target_power = 0.8,     search_lower = 500,     search_upper = 1000,     search_step = 100,     time_points = c(3, 4),     ICC = c(0.4, 0.5, 0.6),     RI_cor = 0.3,     Phi = Phi,     wSigma = wSigma,     reps = 50,     seed = 1234   ) }) }"},{"path":"/reference/powRICLPM_Mplus.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Mplus syntax for RI-CLPM power analysis — powRICLPM_Mplus","title":"Create Mplus syntax for RI-CLPM power analysis — powRICLPM_Mplus","text":"powRICLPM_Mplus() creates saves syntax performing Monte Carlo power analysis random intercept cross-lagged panel model (RI-CLPM) Mplus. can create Mplus model syntax across multiple experimental conditions simultaneously. Conditions defined terms sample size, number time points, proportion -unit variance (ICC). See \"Details\" information ) naming conventions parameters, b) various constraints can imposed model.","code":""},{"path":"/reference/powRICLPM_Mplus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Mplus syntax for RI-CLPM power analysis — powRICLPM_Mplus","text":"","code":"powRICLPM_Mplus(   search_lower = NULL,   search_upper = NULL,   search_step = 20,   sample_size = NULL,   time_points,   ICC,   RI_cor,   Phi,   wSigma,   reps = 1000,   seed = NA,   save_path = getwd(),   constraints = \"none\" )"},{"path":"/reference/powRICLPM_Mplus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Mplus syntax for RI-CLPM power analysis — powRICLPM_Mplus","text":"search_lower positive integer, denoting lower bound range sample sizes. search_upper positive integer, denoting upper bound range sample sizes. search_step positive integer, denoting increment sample size. sample_size (optional) integer (vector), indicating specific sample sizes evaluate power, rather specifying range using search_ arguments. time_points integer (vector) elements least larger 3, indicating number time points. ICC double (vector), denoting proportion variance -unit level. RI_cor double, denoting correlation random intercepts. Phi matrix, standardized autoregressive effects (diagonal) cross-lagged effects (-diagonal) population. Columns represent predictors rows represent outcomes. wSigma correlation matrix within-unit components. reps positive integer, denoting number Monte Carlo replications used simulations. seed `integer` length 1. multiple cores used, seed length 1 used generate full L'Ecuyer-CMRG seed cores (see furrr_options). save_path Character string denoting path leading folder save Mplus syntax files . constraints (optional) character string, specifying type constraints imposed estimation model (see \"Details\").","code":""},{"path":[]},{"path":"/reference/powRICLPM_Mplus.html","id":"syntax-generation","dir":"Reference","previous_headings":"","what":"Syntax generation","title":"Create Mplus syntax for RI-CLPM power analysis — powRICLPM_Mplus","text":"Mplus model syntax created multiple steps: First, MODEL POPULATION command syntax created parameters constrained population values. Second, MODEL command syntax created model estimation. Optionally, syntax constraints estimation model, MODEL CONSTRAINTS command, created next. Ultimately, parameter tables combined form character vectors containing Mplus syntax exported (see \"Details\" powRICLPM information constraints options).","code":""},{"path":"/reference/powRICLPM_Mplus.html","id":"naming-conventions","dir":"Reference","previous_headings":"","what":"Naming conventions","title":"Create Mplus syntax for RI-CLPM power analysis — powRICLPM_Mplus","text":"Details naming conventions can found \"Details\" section powRICLPM.","code":""},{"path":"/reference/powRICLPM_Mplus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Mplus syntax for RI-CLPM power analysis — powRICLPM_Mplus","text":"","code":"# Example - Create Mplus syntax to simulate power across range of sample sizes # Define population parameters for lagged effects and within-component correlations Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = TRUE) wSigma <- matrix(c(1, .3, .3, 1), ncol = 2, byrow = TRUE)  # Create and save Mplus model syntax if (FALSE) { powRICLPM_Mplus(   search_lower = 500,   search_upper = 1000,   search_step = 100,   time_points = c(3, 4),   ICC = c(0.4, 0.5, 0.6),   RI_cor = 0.3,   Phi = Phi,   wSigma = wSigma,   reps = 10000,   seed = 1234 ) }"},{"path":"/reference/print.powRICLPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Print powRICLPM object — print.powRICLPM","title":"Print powRICLPM object — print.powRICLPM","text":"print.powRICLPM prints textual summary setup power analysis within powRICLPM object. Specifically, prints characteristics different experimental conditions, well session info (information applies every condition).","code":""},{"path":"/reference/print.powRICLPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print powRICLPM object — print.powRICLPM","text":"","code":"# S3 method for powRICLPM print(x, ...)"},{"path":"/reference/print.powRICLPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print powRICLPM object — print.powRICLPM","text":"x powRICLPM object. ... Argument use.","code":""},{"path":"/reference/summary.powRICLPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize setup and results from powRICLPM object — summary.powRICLPM","title":"Summarize setup and results from powRICLPM object — summary.powRICLPM","text":"S3 method class powRICLPM. summary.powRICLPM summarizes outputs setup results powRICLPM analysis. Depending input, summary.powRICLPM provides different summary (see \"Details\").","code":""},{"path":"/reference/summary.powRICLPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize setup and results from powRICLPM object — summary.powRICLPM","text":"","code":"# S3 method for powRICLPM summary(   object,   ...,   parameter = NULL,   sample_size = NULL,   time_points = NULL,   ICC = NULL )"},{"path":"/reference/summary.powRICLPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize setup and results from powRICLPM object — summary.powRICLPM","text":"object powRICLPM object. ... (use) Additional arguments affecting summary produced. parameter Character string length denoting parameter visualize results . sample_size (optional) integer (vector), indicating specific sample sizes evaluate power, rather specifying range using search_ arguments. time_points integer (vector) elements least larger 3, indicating number time points. ICC double (vector), denoting proportion variance -unit level.","code":""},{"path":"/reference/summary.powRICLPM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize setup and results from powRICLPM object — summary.powRICLPM","text":"summary.powRICLPM provides different summary powRICLPM object, depending additional arguments set: sample_size = ..., time_points = ..., ICC = ... set: Estimation information results parameters experimental condition denoted sample_size, time_points, ICC. parameter = \"...\" set: Estimation information results specific parameter across experimental conditions. additional arguments: Characteristics different experimental conditions summarized, well session info (information applies conditions, number replications, etc.).","code":""},{"path":"/reference/summary.powRICLPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize setup and results from powRICLPM object — summary.powRICLPM","text":"","code":"# Example - Same starting point as example from ?powRICLPM() # Define population parameters for lagged effects and within-component correlations Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = TRUE) wSigma <- matrix(c(1, .3, .3, 1), ncol = 2, byrow = TRUE)  # Setup parallel computing (multicore, speeding up the analysis) if (FALSE) { library(furrr) plan(multisession, workers = 4)  # Run the analysis out1 <- powRICLPM(   target_power = 0.8,   search_lower = 500,   search_upper = 1000,   search_step = 100,   time_points = c(3, 4),   ICC = c(0.4, 0.5, 0.6),   RI_cor = 0.3,   Phi = Phi,   wSigma = wSigma,   reps = 100,   seed = 123456 )  # General results (i.e., setup of powRICLPM analysis) summary(out)  # General results and recommendation for specific parameter summary(out, parameter = \"wB2~wA1\")  # Summary for specific condition summary(out, sample_size = 600, time_points = 4, ICC = .5) }"},{"path":[]},{"path":"/news/index.html","id":"new-features-0-0-0-9004","dir":"Changelog","previous_headings":"","what":"New features","title":"powRICLPM 0.0.0.9004","text":"powRICLPM() can now set reliability observed variables generated data reliability argument (.e., include measurement error). powRICLPM() can estimate measurement errors setting est_ME = TRUE. powRICLPM() quantifies uncertainty around simulated power non-parametric bootstrapping. powRICLPM() now allows various estimators implemented lavaan. give(= ..., = \"...\") implemented extract various bits information powRICLPM object.","code":""},{"path":"/news/index.html","id":"minor-improvements-and-fixes-0-0-0-9004","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"powRICLPM 0.0.0.9004","text":"check_N() now takes imposed constraints account create informative error messages (@dbaranger, #1). summary.powRICLPM() now tabulates output.","code":""},{"path":"/news/index.html","id":"powriclpm-0009003","dir":"Changelog","previous_headings":"","what":"powRICLPM 0.0.0.9003","title":"powRICLPM 0.0.0.9003","text":"Original GitHub release Beta-version powRICLPM May 17th, 2022.","code":""}]
