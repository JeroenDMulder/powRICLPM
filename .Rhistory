baseline = FALSE
)
suppressWarnings(
lavaan(
model = condition$est_synt,
data = dat,
estimator = estimator,
bounds = bounds,
warn = FALSE,
check.start = FALSE,
check.lv.names = FALSE
)
)
# Fit RI-CLPM
fit <- tryCatch(
{
suppressWarnings(
lavaan(
model = condition$est_synt,
data = dat,
estimator = estimator,
bounds = bounds,
warn = FALSE,
check.start = FALSE,
check.lv.names = FALSE
)
)
},
error = function(e) {
errors[r] <<- TRUE
return(NULL)
}
)
fit
parameterEstimates(fit, remove.nonfree = TRUE)$est[1:n_pars]
parameterEstimates(fit, remove.nonfree = TRUE)$se[1:n_pars]
parameterEstimates(fit, remove.nonfree = TRUE)$pvalue[1:n_pars] < condition$alpha
suppressWarnings(
lavaan(
model = condition$est_synt,
data = dat,
estimator = estimator,
bounds = bounds,
warn = FALSE,
check.start = FALSE,
check.lv.names = FALSE,
test = "none",
implied = FALSE,
h1 = FALSE,
baseline = FALSE
)
)
suppressWarnings(
lavaan(
model = condition$est_synt,
data = dat,
estimator = estimator,
bounds = bounds,
warn = FALSE,
check.start = FALSE,
check.lv.names = FALSE,
implied = FALSE,
h1 = FALSE,
baseline = FALSE
)
)
suppressWarnings(
lavaan(
model = condition$est_synt,
data = dat,
estimator = estimator,
bounds = bounds,
warn = FALSE,
check.start = FALSE,
check.lv.names = FALSE,
test = "none",
h1 = FALSE,
baseline = FALSE
)
)
# Fit RI-CLPM
fit <- tryCatch(
{
suppressWarnings(
lavaan(
model = condition$est_synt,
data = dat,
estimator = estimator,
bounds = bounds,
warn = FALSE,
check.start = FALSE,
check.lv.names = FALSE,
test = "none",
h1 = FALSE,
baseline = FALSE
)
)
},
error = function(e) {
errors[r] <<- TRUE
return(NULL)
}
)
coefs[, r] <- parameterEstimates(fit, remove.nonfree = TRUE)$est[1:n_pars]
SEs[, r] <- parameterEstimates(fit, remove.nonfree = TRUE)$se[1:n_pars]
sigs[, r] <- parameterEstimates(fit, remove.nonfree = TRUE)$pvalue[1:n_pars] < condition$alpha
cvr_r[, r] <- suppressWarnings({
parameterEstimates(fit, remove.nonfree = TRUE, level = (1 - condition$alpha))$ci.lower[1:n_pars] < PV &
parameterEstimates(fit, remove.nonfree = TRUE, level = (1 - condition$alpha))$ci.upper[1:n_pars] > PV
})
acc_r[, r] <- parameterEstimates(fit, remove.nonfree = TRUE, level = (1 - condition$alpha))$ci.upper[1:n_pars] -
parameterEstimates(fit, remove.nonfree = TRUE, level = (1 - condition$alpha))$ci.lower[1:n_pars]
suppressWarnings(
lavaan(
model = condition$est_synt,
data = dat,
estimator = estimator,
bounds = bounds,
warn = FALSE,
check.start = FALSE,
check.lv.names = FALSE,
test = "none",
implied = FALSE,
h1 = FALSE,
baseline = FALSE
)
)
suppressWarnings(
lavaan(
model = condition$est_synt,
data = dat,
estimator = estimator,
bounds = bounds,
warn = FALSE,
check.start = FALSE,
check.lv.names = FALSE,
test = "none",
h1 = FALSE,
baseline = FALSE
)
)
coefs[, r] <- parameterEstimates(fit, remove.nonfree = TRUE)$est[1:n_pars]
SEs[, r] <- parameterEstimates(fit, remove.nonfree = TRUE)$se[1:n_pars]
sigs[, r] <- parameterEstimates(fit, remove.nonfree = TRUE)$pvalue[1:n_pars] < condition$alpha
cvr_r[, r] <- suppressWarnings({
parameterEstimates(fit, remove.nonfree = TRUE, level = (1 - condition$alpha))$ci.lower[1:n_pars] < PV &
parameterEstimates(fit, remove.nonfree = TRUE, level = (1 - condition$alpha))$ci.upper[1:n_pars] > PV
})
acc_r[, r] <- parameterEstimates(fit, remove.nonfree = TRUE, level = (1 - condition$alpha))$ci.upper[1:n_pars] -
parameterEstimates(fit, remove.nonfree = TRUE, level = (1 - condition$alpha))$ci.lower[1:n_pars]
suppressWarnings(
lavaan(
model = condition$est_synt,
data = dat,
estimator = estimator,
bounds = bounds,
warn = FALSE,
check.start = FALSE,
check.lv.names = FALSE,
test = "none",
h1 = FALSE,
baseline = FALSE,
post.check = FALSE
)
)
suppressWarnings(
lavaan(
model = condition$est_synt,
data = dat,
estimator = estimator,
bounds = bounds,
warn = FALSE,
check.start = FALSE,
check.lv.names = FALSE,
test = "none",
h1 = FALSE,
baseline = FALSE,
check.post = FALSE
)
)
lavInspect(fit, what = "post.check")
?lavInspect
lavInspect(fit, "options")
fit@Options
fit@ParTable
?lavaan
fit@Model
fit@Data
expect_equal(check_T(c(3, 4), est_ME = FALSE), c(3, 4))
library(devtools)
expect_equal(check_T(c(3, 4), est_ME = FALSE), c(3, 4))
library(testthat)
expect_equal(check_T(c(3, 4), est_ME = FALSE), c(3, 4))
expect_error(check_T(3.5, est_ME = FALSE))
expect_equal(check_T(c(3, 4), est_ME = FALSE), c(3, 4))
expect_warning(check_T(c(3:30), est_ME = FALSE))
expect_error(check_T(c(3, 4), est_ME = TRUE))
load_all()
check_est_ME(TRUE)
# Test check_est_ME() ----
test_that("check_estimate_ME() works", {
expect_error(check_estimate_ME(1))
expect_error(check_estimate_ME("ME"))
expect_error(check_estimate_ME(c(TRUE, TRUE)))
expect_equal(check_estimate_ME(TRUE), TRUE)
})
# Create valid powRICLPM() input
Phi <- matrix(c(0.4, 0.15, 0.2, 0.3), ncol = 2, byrow = TRUE)
out1 <- powRICLPM(
target_power = 0.8,
sample_size = 400,
time_points = 3,
ICC = 0.5,
RI_cor = 0.3,
Phi = Phi,
within_cor = 0.3,
reps = 2,
seed = 123456,
bounds = FALSE
)
# Run setup()
out1 <- setup(
target_power = .8,
sample_size = c(400, 500),
time_points = c(3, 4),
ICC = c(.3, .5),
RI_cor = .3,
Phi = Phi,
wSigma = wSigma,
Psi = Psi,
reliability = 1,
skewness = 0,
kurtosis = 0,
est_ME = FALSE,
alpha = .05,
reps = 30,
bootstrap_reps = 1000,
seed = 1234,
constraints = "none",
bounds = FALSE,
estimator = "ML"
)
# Run setup()
out1 <- setup(
target_power = .8,
sample_size = c(400, 500),
time_points = c(3, 4),
ICC = c(.3, .5),
RI_cor = .3,
Phi = Phi,
wSigma = wSigma,
Psi = Psi,
reliability = 1,
skewness = 0,
kurtosis = 0,
estimate_ME = FALSE,
alpha = .05,
reps = 30,
bootstrap_reps = 1000,
seed = 1234,
constraints = "none",
bounds = FALSE,
estimator = "ML"
)
load_all()
# Create valid setup() input
Phi <- matrix(c(0.4, 0.15, 0.2, 0.3), ncol = 2, byrow = TRUE)
load_all()
# Create valid setup() input
Phi <- matrix(c(0.4, 0.15, 0.2, 0.3), ncol = 2, byrow = TRUE)
# Create valid setup() input
Phi <- matrix(c(0.4, 0.15, 0.2, 0.3), ncol = 2, byrow = TRUE)
wSigma <- matrix(c(1, 0.3, 0.3, 1), ncol = 2, byrow = TRUE)
Psi <- powRICLPM:::compute_Psi(Phi = Phi, wSigma = wSigma)
# Run setup()
out1 <- setup(
target_power = .8,
sample_size = c(400, 500),
time_points = c(3, 4),
ICC = c(.3, .5),
RI_cor = .3,
Phi = Phi,
wSigma = wSigma,
Psi = Psi,
reliability = 1,
skewness = 0,
kurtosis = 0,
estimate_ME = FALSE,
alpha = .05,
reps = 30,
bootstrap_reps = 1000,
seed = 1234,
constraints = "none",
bounds = FALSE,
estimator = "ML"
)
load_all()
# Create valid setup() input
Phi <- matrix(c(0.4, 0.15, 0.2, 0.3), ncol = 2, byrow = TRUE)
wSigma <- matrix(c(1, 0.3, 0.3, 1), ncol = 2, byrow = TRUE)
Psi <- powRICLPM:::compute_Psi(Phi = Phi, wSigma = wSigma)
# Run setup()
out1 <- setup(
target_power = .8,
sample_size = c(400, 500),
time_points = c(3, 4),
ICC = c(.3, .5),
RI_cor = .3,
Phi = Phi,
wSigma = wSigma,
Psi = Psi,
reliability = 1,
skewness = 0,
kurtosis = 0,
estimate_ME = FALSE,
alpha = .05,
reps = 30,
bootstrap_reps = 1000,
seed = 1234,
constraints = "none",
bounds = FALSE,
estimator = "ML"
)
# Run setup()
out1 <- setup(
target_power = .8,
sample_size = c(400, 500),
time_points = c(3, 4),
ICC = c(.3, .5),
RI_cor = .3,
Phi = Phi,
wSigma = wSigma,
Psi = Psi,
reliability = 1,
skewness = 0,
kurtosis = 0,
estimate_ME = FALSE,
alpha = .05,
reps = 30,
bootstrap_reps = 1000,
seed = 1234,
constraints = "none",
bounds = FALSE,
estimator = "ML",
save_path = NULL
)
# Run general tests
expect_type(out1, "list")
expect_equal(length(out1), 2)
expect_equal(names(out1), c("conditions", "session"))
# Test "conditions" element
expect_equal(length(out1$conditions), 8)
expect_type(out1$conditions[[1]], "list")
expect_equal(names(out1$conditions[[1]]), c("sample_size", "time_points", "ICC", "RI_var", "RI_cov", "pop_synt", "pop_tab", "est_synt", "est_tab", "est_ME", "skewness", "kurtosis", "alpha", "estimates", "uncertainty", "errors", "not_converged", "inadmissible"))
# Create valid powRICLPM() input
Phi <- matrix(c(0.4, 0.15, 0.2, 0.3), ncol = 2, byrow = TRUE)
# Single experimental condition
out1 <- powRICLPM(
target_power = 0.8,
sample_size = 1000,
time_points = 3,
ICC = 0.5,
RI_cor = 0.3,
Phi = Phi,
within_cor = 0.3,
reps = 2,
seed = 123456
)
search_lower = NULL
search_upper = NULL
search_step = 20
sample_size = NULL
reliability = 1
skewness = 0
kurtosis = 0
estimate_ME = FALSE
alpha = 0.05
reps = 20
bootstrap_reps = 1000
seed = NA
constraints = "none"
bounds = FALSE
estimator = NA
save_path = NULL
target_power = 0.8
sample_size = 1000
time_points = 3
ICC = 0.5
RI_cor = 0.3
Phi = Phi
within_cor = 0.3
reps = 2
seed = 123456
# Check arguments I
message(rlang::format_error_bullets(c(
i = "Checking arguments..."
)))
target_power <- check_target(target_power)
time_points <- check_T(time_points, estimate_ME)
ICC <- check_ICC(ICC)
RI_cor <- check_RIcor(RI_cor)
wSigma <- check_within_cor(within_cor)
Phi <- check_Phi(Phi)
reliability <- check_reliability(reliability)
skewness <- check_skewness(skewness)
kurtosis <- check_kurtosis(kurtosis)
alpha <- check_alpha(alpha)
estimate_ME <- check_estimate_ME(estimate_ME)
reps <- check_reps(reps)
bootstrap_reps <- check_reps(bootstrap_reps)
seed <- check_seed(seed)
constraints <- check_constraints(constraints)
bounds <- check_bounds(bounds, constraints)
estimator <- check_estimator(estimator, skewness, kurtosis)
save_path <- check_save_path(save_path)
load_all()
# Single experimental condition
out1 <- powRICLPM(
target_power = 0.8,
sample_size = 1000,
time_points = 3,
ICC = 0.5,
RI_cor = 0.3,
Phi = Phi,
within_cor = 0.3,
reps = 2,
seed = 123456
)
# Run tests
expect_equal(class(out1), c("powRICLPM", "list"))
expect_equal(names(out1), c("conditions", "session"))
# Test "conditions" element
expect_equal(length(out1$conditions), 1)
expect_equal(
c("estimates", "uncertainty", "errors", "not_converged", "inadmissible") %in% names(out1$conditions[[1]]),
c(T, T, T, T, T)
)
expect_type(out1$conditions[[1]]$estimates, "list")
expect_type(out1$conditions[[1]]$uncertainty, "list")
summary(out1)
snapshot_accept('summary')
document()
build_site()
library(pkgdown)
build_news()
build_site_github_pages()
document()
?build_site
build_news()
build_news()
build_news
use_readme_rmd()
use_news_md()
use_github_links()
gh_token_help()
create_github_token()
gitcreds::gitcreds_set()
use_github_links()
library(pkgdown)
build_site()
?use_badge
use_cran_badge()
use_cran_comments()
use_github_action_check_standard()
devtools::build_readme()
?devtools::check_win_*()
?devtools::check_win()
devtools::check_win_release()
use_revdep()
revdepcheck::revdep_check(num_workers = 4)
install.packages('revdepcheck')
devtools::install_github('r-lib/revdepcheck')
document()
?powRICLPM
document()
?powRICLPM
document()
?powRICLPM
devtools::check_win_release()
warnings()
?use_github_action_check_standard
library(pkgbuild)
build_site()
document()
knit_with_parameters("C:/Users/5879167/surfdrive/R packages/powRICLPM/vignettes/extensions.Rmd")
unlink("vignettes/extensions_cache", recursive = TRUE)
build_site()
install.packages("ps")
install.packages("ps")
install.packages("R6")
document()
library(devtools)
library(devtools)
mean(1:5)
library(lavaan)
library(powRICLPM)
?usethis::use_github_action_check_standard
devtools::release()
devtools()
library(devtools)
spell_check()
release()
check_rhub()
install.packages('furrr')
install.packages('progressr')
check_rhub()
check_rhub()
release()
check_news_md()
library(devtools)
check_news_md()
release()
