search_lower = 500,
search_upper = 1000,
search_step = 100,
time_points = c(3, 4),
ICC = c(0.4, 0.5, 0.6),
RI_cor = 0.3,
Phi = Phi,
wSigma = wSigma,
reps = 5,
seed = 123456
)
})
identical(out1, out2)
out1$conditions[[1]]$results
out2$conditions[[1]]$results
expect_equal(check_skewness(0.5), 0.5)
# Create valid powRICLPM() input
time_points <- 3
ICC <- 0.5
RI_cor <- 0.3
Phi <- matrix(c(0.4, 0.15, 0.2, 0.3), ncol = 2, byrow = TRUE)
wSigma <- matrix(c(1, 0.3, 0.3, 1), ncol = 2, byrow = TRUE)
Psi <- compute_Psi(Phi = Phi, wSigma = wSigma)
RI_var <- compute_RI_var(ICC)
RI_cov <- compute_RI_cov(RI_cor = RI_cor, RI_var = RI_var)
load_all()
Phi <- matrix(c(0.4, 0.15, 0.2, 0.3), ncol = 2, byrow = TRUE)
wSigma <- matrix(c(1, 0.3, 0.3, 1), ncol = 2, byrow = TRUE)
Psi <- compute_Psi(Phi = Phi, wSigma = wSigma)
RI_var <- compute_RI_var(ICC)
RI_cov <- compute_RI_cov(RI_cor = RI_cor, RI_var = RI_var)
# Create lavaan syntax for generating data
pop_synt <- create_lavaan(
time_points = time_points,
RI_var = RI_var,
RI_cov = RI_cov,
Phi = Phi,
wSigma = wSigma,
Psi = Psi,
syntax = TRUE
)
# Create lavaan parameter table for population model
pop_tab <- create_lavaan(
time_points = time_points,
RI_var = RI_var,
RI_cov = RI_cov,
Phi = Phi,
wSigma = wSigma,
Psi = Psi,
estimation = FALSE
)
# Create lavaan syntax for estimating the model
est_synt <- create_lavaan(
time_points = time_points,
RI_var = RI_var,
RI_cov = RI_cov,
Phi = Phi,
wSigma = wSigma,
Psi = Psi,
estimation = TRUE,
syntax = TRUE
)
load_all()
# Create lavaan syntax for estimating the model
est_synt <- create_lavaan(
time_points = time_points,
RI_var = RI_var,
RI_cov = RI_cov,
Phi = Phi,
wSigma = wSigma,
Psi = Psi,
estimation = TRUE,
syntax = TRUE
)
input$constraints
# Create lavaan syntax for estimating the model
est_synt <- create_lavaan(
time_points = time_points,
RI_var = RI_var,
RI_cov = RI_cov,
Phi = Phi,
wSigma = wSigma,
Psi = Psi,
estimation = TRUE,
constraints = "none",
syntax = TRUE
)
# Create valid input
target_power <- 0.8
sample_size <- 300
time_points <- 3
ICC <- 0.5
RI_cor <- 0.3
Phi <- matrix(c(0.4, 0.15, 0.2, 0.3), ncol = 2, byrow = TRUE)
wSigma <- matrix(c(1, 0.3, 0.3, 1), ncol = 2, byrow = TRUE)
Psi <- compute_Psi(Phi = Phi, wSigma = wSigma)
skewness <- 0
kurtosis <- 0
alpha <- 0.1
reps <- 30
seed <- 123456
save_path <- NA
parameter <- "wB2~wA1"
constraints <- "none"
bounds <- FALSE
# Run setup()
setup1 <- setup(
target_power = target_power,
sample_size = sample_size,
time_points = time_points,
ICC = ICC,
RI_cor = RI_cor,
Phi = Phi,
wSigma = wSigma,
Psi = Psi,
skewness = 0,
kurtosis = 0,
alpha = alpha,
reps = reps,
seed = seed,
save_path = save_path,
parameter = "wB2~wA1",
constraints = constraints,
bounds = bounds
)
load_all(0)
load_all()
# Run setup()
setup1 <- setup(
target_power = target_power,
sample_size = sample_size,
time_points = time_points,
ICC = ICC,
RI_cor = RI_cor,
Phi = Phi,
wSigma = wSigma,
Psi = Psi,
skewness = 0,
kurtosis = 0,
alpha = alpha,
reps = reps,
seed = seed,
save_path = save_path,
parameter = "wB2~wA1",
constraints = constraints,
bounds = bounds
)
# Prepare progress bar
progressr::with_progress({
p <- progressr::progressor(along = setup1$conditions)
# Run run_condition()
out1 <- run_condition(
object = setup1$conditions[[1]],
progress = p,
bounds = FALSE
)
})
# Test output
expect_equal(length(out1), 19)
expect_equal(names(out1), c("sample_size", "time_points", "ICC", "RI_var",
"RI_cov", "reps", "pop_synt", "pop_tab",
"est_synt", "est_tab", "skewness", "kurtosis",
"alpha", "save_path", "results", "errors",
"not_converged", "inadmissible"))
expect_equal(length(output$inadmissible), input$reps)
out1$inadmissible
out1$results
expect_equal(length(out1$inadmissible), input$reps)
expect_type(out1$results, "list")
expect_equal(length(out1$inadmissible), reps)
expect_type(out1$results, "list")
expect_type(out1$errors, "logical")
expect_type(out1$not_converged, "logical")
expect_type(out1t$inadmissible, "logical")
expect_type(out1$inadmissible, "logical")
expect_equal(dim(out1$results), c(20, 8))
# Create valid setup() input
target_power <- 0.8
sample_size <- c(300, 350, 400)
time_points <- 3
ICC <- 0.5
RI_cor <- 0.3
Phi <- matrix(c(0.4, 0.15, 0.2, 0.3), ncol = 2, byrow = TRUE)
wSigma <- matrix(c(1, 0.3, 0.3, 1), ncol = 2, byrow = TRUE)
Psi <- compute_Psi(Phi = Phi, wSigma = wSigma)
skewness <- 0
kurtosis <- 0
alpha <- 0.1
reps <- 30
seed <- 123456
save_path <- NA
parameter <- "wB2~wA1"
constraints <- "none"
bounds <- FALSE
# Run setup()
out1 <- setup(
target_power = target_power,
sample_size = sample_size,
time_points = time_points,
ICC = ICC,
RI_cor = RI_cor,
Phi = Phi,
wSigma = wSigma,
Psi = Psi,
skewness = 0,
kurtosis = 0,
alpha = alpha,
reps = reps,
seed = seed,
save_path = save_path,
parameter = "wB2~wA1",
constraints = constraints,
bounds = bounds
)
out1$session$save_path
expect_equal(out1$session$save_path, NA)
snapshot_accept('summary')
# Create valid powRICLPM() input
Phi <- matrix(c(0.4, 0.15, 0.2, 0.3), ncol = 2, byrow = TRUE)
wSigma <- matrix(c(1, 0.3, 0.3, 1), ncol = 2, byrow = TRUE)
# Base condition - Single experimental condition
out1 <- powRICLPM(
target_power = 0.8,
sample_size = c(300, 400),
time_points = 3,
ICC = 0.5,
RI_cor = 0.3,
Phi = Phi,
wSigma = wSigma,
reps = 2,
seed = 123456
)
expect_snapshot(summary(out1))
expect_snapshot(summary(out1, parameter = "wB2~wA1"))
expect_snapshot(summary(out1, names = TRUE))
# Create valid powRICLPM() input
Phi <- matrix(c(0.4, 0.15, 0.2, 0.3), ncol = 2, byrow = TRUE)
wSigma <- matrix(c(1, 0.3, 0.3, 1), ncol = 2, byrow = TRUE)
# Base condition - Single experimental condition
out1 <- powRICLPM(
target_power = 0.8,
sample_size = 1000,
time_points = 3,
ICC = 0.5,
RI_cor = 0.3,
Phi = Phi,
wSigma = wSigma,
reps = 2,
seed = 123456
)
# Run tests
expect_equal(class(out1), c("powRICLPM", "list"))
expect_equal(names(out1), c("conditions", "session"))
# Test "conditions" element
expect_equal(length(out1$conditions), 1)
expect_equal(
c("results", "errors", "not_converged", "inadmissible") %in% names(out1$conditions[[1]]),
c(T, T, T, T, T)
)
expect_equal(
c("results", "errors", "not_converged", "inadmissible") %in% names(out1$conditions[[1]]),
c(T, T, T, T)
)
expect_type(out1$conditions[[1]]$results, "list")
expect_type(out1$conditions[[1]]$errors, "logical")
expect_type(out1$conditions[[1]]$not_converged, "logical")
expect_type(out1$conditions[[1]]$inadmissible, "logical")
# Test "sessions" element
expect_equal(out1$session$reps, 5)
# Test "sessions" element
expect_equal(out1$session$reps, 2)
expect_equal(out1$session$target_power, 0.8)
expect_equal(out1$session$save_path, NA)
expect_null(out1$session$parameter)
expect_equal(out1$session$constraints, "none")
expect_false(out1$session$bounds)
# Multiple experimental conditions
out2 <- powRICLPM(
target_power = 0.8,
sample_size = c(100, 200),
time_points = c(3, 4),
ICC = c(0.4, 0.6),
RI_cor = 0.3,
Phi = Phi,
wSigma = wSigma,
reps = 2,
seed = 123456
)
# Run tests
expect_equal(class(out2), c("powRICLPM", "list"))
expect_equal(names(out2), c("conditions", "session"))
# Run tests
expect_equal(class(out2), c("powRICLPM", "list"))
expect_equal(names(out2), c("conditions", "session"))
# Test "conditions" element
expect_equal(length(out2$conditions), 6)
out2$conditions
# Test "conditions" element
expect_equal(length(out2$conditions), 8)
expect_equal(
c("results", "errors", "not_converged", "inadmissible") %in% names(out2$conditions[[6]]),
c(T, T, T, T)
)
# Create valid powRICLPM() input
Phi <- matrix(c(0.4, 0.15, 0.2, 0.3), ncol = 2, byrow = TRUE)
wSigma <- matrix(c(1, 0.3, 0.3, 1), ncol = 2, byrow = TRUE)
out1 <- powRICLPM(
target_power = 0.8,
sample_size = 20,
time_points = 3,
ICC = 0.5,
RI_cor = 0.3,
Phi = Phi,
wSigma = wSigma,
reps = 10,
seed = 123456,
bounds = FALSE
)
out1 <- powRICLPM(
target_power = 0.8,
sample_size = 21,
time_points = 3,
ICC = 0.5,
RI_cor = 0.3,
Phi = Phi,
wSigma = wSigma,
reps = 10,
seed = 123456,
bounds = FALSE
)
out2 <- powRICLPM(
target_power = 0.8,
sample_size = 20,
time_points = 3,
ICC = 0.5,
RI_cor = 0.3,
Phi = Phi,
wSigma = wSigma,
reps = 10,
seed = 123456,
bounds = TRUE
)
expect_equal(class(out2), c("powRICLPM", "list"))
out1 <- powRICLPM(
target_power = 0.8,
sample_size = 21,
time_points = 3,
ICC = 0.5,
RI_cor = 0.3,
Phi = Phi,
wSigma = wSigma,
reps = 10,
seed = 123456,
bounds = FALSE
)
out2 <- powRICLPM(
target_power = 0.8,
sample_size = 21,
time_points = 3,
ICC = 0.5,
RI_cor = 0.3,
Phi = Phi,
wSigma = wSigma,
reps = 10,
seed = 123456,
bounds = TRUE
)
expect_equal(class(out2), c("powRICLPM", "list"))
expect_equal(names(out2), c("conditions", "session"))
expect_equal(
c("results", "errors", "not_converged", "inadmissible") %in% names(out1$conditions[[1]]),
c(T, T, T, T)
)
expect_type(out2$conditions[[1]]$results, "list")
expect_type(out2$conditions[[1]]$results, "list")
expect_type(out2$conditions[[1]]$errors, "logical")
expect_type(out2$conditions[[1]]$not_converged, "logical")
expect_type(out2$conditions[[1]]$inadmissible, "logical")
# Test "session" element
expect_true(out2$session$bounds)
# Test that bounded estimation works
expect_true(sum(out1$conditions[[1]]$not_converged) > sum(out2$conditions[[1]]$not_converged))
# Create valid powRICLPM() input
Phi <- matrix(c(0.4, 0.15, 0.2, 0.3), ncol = 2, byrow = TRUE)
wSigma <- matrix(c(1, 0.3, 0.3, 1), ncol = 2, byrow = TRUE)
out1 <- powRICLPM(
target_power = 0.8,
sample_size = 300,
time_points = 3,
ICC = 0.5,
RI_cor = 0.3,
Phi = Phi,
wSigma = wSigma,
reps = 2,
seed = 123456,
bounds = FALSE,
constraints = "lagged"
)
expect_equal(
out1$conditions[[1]]$results$avg[which(out1$conditions[[1]]$results$par == "wB2~wA1")],
out1$conditions[[1]]$results$avg[which(out1$conditions[[1]]$results$par == "wB3~wA2")]
)
out2 <- powRICLPM(
target_power = 0.8,
sample_size = 300,
time_points = 3,
ICC = 0.5,
RI_cor = 0.3,
Phi = Phi,
wSigma = wSigma,
reps = 2,
seed = 123456,
bounds = FALSE,
constraints = "residuals"
)
expect_equal(
out2$conditions[[1]]$results$avg[which(out2$conditions[[1]]$results$par == "wA2~~wA2")],
out2$conditions[[1]]$results$avg[which(out2$conditions[[1]]$results$par == "wA3~~wA3")]
)
out3 <- powRICLPM(
target_power = 0.8,
sample_size = 300,
time_points = 3,
ICC = 0.5,
RI_cor = 0.3,
Phi = Phi,
wSigma = wSigma,
reps = 2,
seed = 123456,
bounds = FALSE,
constraints = "within"
)
expect_equal(
out3$conditions[[1]]$results$avg[which(out3$conditions[[1]]$results$par == "wB2~wA1")],
out3$conditions[[1]]$results$avg[which(out3$conditions[[1]]$results$par == "wB3~wA2")]
)
expect_equal(
out3$conditions[[1]]$results$avg[which(out3$conditions[[1]]$results$par == "wA2~~wA2")],
out3$conditions[[1]]$results$avg[which(out3$conditions[[1]]$results$par == "wA3~~wA3")]
)
out4 <- powRICLPM(
target_power = 0.8,
sample_size = 300,
time_points = 3,
ICC = 0.5,
RI_cor = 0.3,
Phi = Phi,
wSigma = wSigma,
reps = 2,
seed = 123456,
bounds = FALSE,
constraints = "stationarity"
)
out4 <- powRICLPM(
target_power = 0.8,
sample_size = 300,
time_points = 3,
ICC = 0.5,
RI_cor = 0.3,
Phi = Phi,
wSigma = wSigma,
reps = 2,
seed = 123456,
bounds = FALSE,
constraints = "stationarity"
)
load_all()
out4 <- powRICLPM(
target_power = 0.8,
sample_size = 300,
time_points = 3,
ICC = 0.5,
RI_cor = 0.3,
Phi = Phi,
wSigma = wSigma,
reps = 2,
seed = 123456,
bounds = FALSE,
constraints = "stationarity"
)
install()
out4 <- powRICLPM(
target_power = 0.8,
sample_size = 300,
time_points = 3,
ICC = 0.5,
RI_cor = 0.3,
Phi = Phi,
wSigma = wSigma,
reps = 2,
seed = 123456,
bounds = FALSE,
constraints = "stationarity"
)
out3 <- powRICLPM(
target_power = 0.8,
sample_size = 300,
time_points = 3,
ICC = 0.5,
RI_cor = 0.3,
Phi = Phi,
wSigma = wSigma,
reps = 2,
seed = 123456,
bounds = FALSE,
constraints = "within"
)
load_all()
load_all()
load_all()
load_all()
install()
